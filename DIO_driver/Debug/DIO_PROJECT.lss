
DIO_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000005ec  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114b  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b1  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000091c  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000478  00000000  00000000  00002c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000717  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000037eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 df 02 	call	0x5be	; 0x5be <main>
  7a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KeyPad_Init>:


void KeyPad_Init(void)
{
	
	DIO_setPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN0 , DIO_PIN_OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	67 e0       	ldi	r22, 0x07	; 7
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN1 , DIO_PIN_OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	66 e0       	ldi	r22, 0x06	; 6
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN2 , DIO_PIN_OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	65 e0       	ldi	r22, 0x05	; 5
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection( KEYPAD_COLUMN_PORT , KEYPAD_COLUMN3 , DIO_PIN_OUTPUT);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	
	DIO_setPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW0 , DIO_PIN_INPUT);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	65 e0       	ldi	r22, 0x05	; 5
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW1 , DIO_PIN_INPUT);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	64 e0       	ldi	r22, 0x04	; 4
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW2 , DIO_PIN_INPUT);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection( KEYPAD_ROW_PORT , KEYPAD_ROW3 , DIO_PIN_INPUT);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	62 e0       	ldi	r22, 0x02	; 2
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	//DIO_SetPullUp( KEYPAD_ROW_PORT , KEYPAD_ROW0);
	//DIO_SetPullUp( KEYPAD_ROW_PORT , KEYPAD_ROW1);
	//DIO_SetPullUp( KEYPAD_ROW_PORT , KEYPAD_ROW2);
	//DIO_SetPullUp( KEYPAD_ROW_PORT , KEYPAD_ROW3);
	
	DIO_WritePin(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN0 , PIN_HIGH);
  d2:	41 e0       	ldi	r20, 0x01	; 1
  d4:	67 e0       	ldi	r22, 0x07	; 7
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	DIO_WritePin(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN1 , PIN_HIGH);
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	66 e0       	ldi	r22, 0x06	; 6
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	DIO_WritePin(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN2 , PIN_HIGH);
  e6:	41 e0       	ldi	r20, 0x01	; 1
  e8:	65 e0       	ldi	r22, 0x05	; 5
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	DIO_WritePin(KEYPAD_COLUMN_PORT , KEYPAD_COLUMN3 , PIN_HIGH);
  f0:	41 e0       	ldi	r20, 0x01	; 1
  f2:	63 e0       	ldi	r22, 0x03	; 3
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
  fa:	08 95       	ret

000000fc <KeyPad_GetValue>:
	
}

uint8_t KeyPad_GetValue(void)
{
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	1f 92       	push	r1
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62
	uint8_t Col_Loc = 0;
	uint8_t Row_Loc = 0;
	
	uint8_t Value = 0;
	uint8_t Temp = 0;
 10c:	19 82       	std	Y+1, r1	; 0x01
uint8_t KeyPad_GetValue(void)
{
	uint8_t Col_Loc = 0;
	uint8_t Row_Loc = 0;
	
	uint8_t Value = 0;
 10e:	f1 2c       	mov	r15, r1
	uint8_t Temp = 0;
	
	for(Col_Loc = COL_INIT ; Col_Loc >= COL_FINAL ; Col_Loc--)
 110:	07 e0       	ldi	r16, 0x07	; 7
 112:	3e c0       	rjmp	.+124    	; 0x190 <KeyPad_GetValue+0x94>
	{
		//Activate the column
		if (Col_Loc == 4)
 114:	04 30       	cpi	r16, 0x04	; 4
 116:	d9 f1       	breq	.+118    	; 0x18e <KeyPad_GetValue+0x92>
		{
			continue;
		}
		DIO_WritePin(KEYPAD_COLUMN_PORT , Col_Loc , PIN_LOW);
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	60 2f       	mov	r22, r16
 11c:	83 e0       	ldi	r24, 0x03	; 3
 11e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
		
		for(Row_Loc = ROW_INIT ; Row_Loc >= ROW_FINAL ; Row_Loc--)
 122:	15 e0       	ldi	r17, 0x05	; 5
 124:	2d c0       	rjmp	.+90     	; 0x180 <KeyPad_GetValue+0x84>
		{
			
			DIO_ReadPin(KEYPAD_ROW_PORT , Row_Loc, &Temp);
 126:	ae 01       	movw	r20, r28
 128:	4f 5f       	subi	r20, 0xFF	; 255
 12a:	5f 4f       	sbci	r21, 0xFF	; 255
 12c:	61 2f       	mov	r22, r17
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_ReadPin>
			
			//wait until the switch is releases
			if(!Temp)
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	81 11       	cpse	r24, r1
 138:	22 c0       	rjmp	.+68     	; 0x17e <KeyPad_GetValue+0x82>
			{
				Value =  KeyPad_Values[Row_Loc - ROW_INIT][Col_Loc - COL_INIT];
 13a:	81 2f       	mov	r24, r17
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	05 97       	sbiw	r24, 0x05	; 5
 140:	20 2f       	mov	r18, r16
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	27 50       	subi	r18, 0x07	; 7
 146:	31 09       	sbc	r19, r1
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	80 5a       	subi	r24, 0xA0	; 160
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	fc 01       	movw	r30, r24
 156:	e2 0f       	add	r30, r18
 158:	f3 1f       	adc	r31, r19
 15a:	f0 80       	ld	r15, Z
				
				while(!Temp)
 15c:	07 c0       	rjmp	.+14     	; 0x16c <KeyPad_GetValue+0x70>
				{
					DIO_ReadPin(KEYPAD_ROW_PORT , Row_Loc, &Temp);
 15e:	ae 01       	movw	r20, r28
 160:	4f 5f       	subi	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	61 2f       	mov	r22, r17
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_ReadPin>
			//wait until the switch is releases
			if(!Temp)
			{
				Value =  KeyPad_Values[Row_Loc - ROW_INIT][Col_Loc - COL_INIT];
				
				while(!Temp)
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	88 23       	and	r24, r24
 170:	b1 f3       	breq	.-20     	; 0x15e <KeyPad_GetValue+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	9e e4       	ldi	r25, 0x4E	; 78
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <KeyPad_GetValue+0x7a>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <KeyPad_GetValue+0x80>
 17c:	00 00       	nop
		{
			continue;
		}
		DIO_WritePin(KEYPAD_COLUMN_PORT , Col_Loc , PIN_LOW);
		
		for(Row_Loc = ROW_INIT ; Row_Loc >= ROW_FINAL ; Row_Loc--)
 17e:	11 50       	subi	r17, 0x01	; 1
 180:	12 30       	cpi	r17, 0x02	; 2
 182:	88 f6       	brcc	.-94     	; 0x126 <KeyPad_GetValue+0x2a>
				_delay_ms(10);
			}
			
		}
		//deactivate column again
		DIO_WritePin(KEYPAD_COLUMN_PORT , Col_Loc , PIN_HIGH);
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	60 2f       	mov	r22, r16
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	uint8_t Row_Loc = 0;
	
	uint8_t Value = 0;
	uint8_t Temp = 0;
	
	for(Col_Loc = COL_INIT ; Col_Loc >= COL_FINAL ; Col_Loc--)
 18e:	01 50       	subi	r16, 0x01	; 1
 190:	03 30       	cpi	r16, 0x03	; 3
 192:	08 f0       	brcs	.+2      	; 0x196 <KeyPad_GetValue+0x9a>
 194:	bf cf       	rjmp	.-130    	; 0x114 <KeyPad_GetValue+0x18>
		DIO_WritePin(KEYPAD_COLUMN_PORT , Col_Loc , PIN_HIGH);
		
	}
	
	return Value ;
 196:	8f 2d       	mov	r24, r15
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	ff 90       	pop	r15
 1a4:	08 95       	ret

000001a6 <DIO_setPortDirection>:
	}
}

void DIO_setPortDirection(uint8_t Port, uint8_t dir)
{
	switch(Port)
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	41 f0       	breq	.+16     	; 0x1ba <DIO_setPortDirection+0x14>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_setPortDirection+0x10>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	39 f0       	breq	.+14     	; 0x1be <DIO_setPortDirection+0x18>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <DIO_setPortDirection+0x1c>
 1b4:	08 95       	ret
	{
		case DIO_PORTA:
		DDRA = dir;
 1b6:	6a bb       	out	0x1a, r22	; 26
		break;
 1b8:	08 95       	ret
		
		case DIO_PORTB:
		DDRB = dir;
 1ba:	67 bb       	out	0x17, r22	; 23
		break;
 1bc:	08 95       	ret
		
		case DIO_PORTC:
		DDRC = dir;
 1be:	64 bb       	out	0x14, r22	; 20
		break;
 1c0:	08 95       	ret
		
		case DIO_PORTD:
		DDRD = dir;
 1c2:	61 bb       	out	0x11, r22	; 17
 1c4:	08 95       	ret

000001c6 <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	a1 f5       	brne	.+104    	; 0x232 <DIO_setPinDirection+0x6c>
	{
		switch(Port)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	89 f0       	breq	.+34     	; 0x1f0 <DIO_setPinDirection+0x2a>
 1ce:	28 f0       	brcs	.+10     	; 0x1da <DIO_setPinDirection+0x14>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	c9 f0       	breq	.+50     	; 0x206 <DIO_setPinDirection+0x40>
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	11 f1       	breq	.+68     	; 0x21c <DIO_setPinDirection+0x56>
 1d8:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
 1da:	2a b3       	in	r18, 0x1a	; 26
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_setPinDirection+0x20>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_setPinDirection+0x1c>
 1ea:	82 2b       	or	r24, r18
 1ec:	8a bb       	out	0x1a, r24	; 26
			break;
 1ee:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
 1f0:	27 b3       	in	r18, 0x17	; 23
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_setPinDirection+0x36>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_setPinDirection+0x32>
 200:	82 2b       	or	r24, r18
 202:	87 bb       	out	0x17, r24	; 23
			break;
 204:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
 206:	24 b3       	in	r18, 0x14	; 20
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_setPinDirection+0x4c>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_setPinDirection+0x48>
 216:	82 2b       	or	r24, r18
 218:	84 bb       	out	0x14, r24	; 20
			break;
 21a:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
 21c:	21 b3       	in	r18, 0x11	; 17
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_setPinDirection+0x62>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_setPinDirection+0x5e>
 22c:	82 2b       	or	r24, r18
 22e:	81 bb       	out	0x11, r24	; 17
			break;
 230:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 232:	41 11       	cpse	r20, r1
 234:	37 c0       	rjmp	.+110    	; 0x2a4 <DIO_setPinDirection+0xde>
	{
		switch(Port)
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	91 f0       	breq	.+36     	; 0x25e <DIO_setPinDirection+0x98>
 23a:	28 f0       	brcs	.+10     	; 0x246 <DIO_setPinDirection+0x80>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	d9 f0       	breq	.+54     	; 0x276 <DIO_setPinDirection+0xb0>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	29 f1       	breq	.+74     	; 0x28e <DIO_setPinDirection+0xc8>
 244:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 246:	2a b3       	in	r18, 0x1a	; 26
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_setPinDirection+0x8c>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_setPinDirection+0x88>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	8a bb       	out	0x1a, r24	; 26
			break;
 25c:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 25e:	27 b3       	in	r18, 0x17	; 23
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_setPinDirection+0xa4>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_setPinDirection+0xa0>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	87 bb       	out	0x17, r24	; 23
			break;
 274:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 276:	24 b3       	in	r18, 0x14	; 20
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_setPinDirection+0xbc>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_setPinDirection+0xb8>
 286:	80 95       	com	r24
 288:	82 23       	and	r24, r18
 28a:	84 bb       	out	0x14, r24	; 20
			break;
 28c:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 28e:	21 b3       	in	r18, 0x11	; 17
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_setPinDirection+0xd4>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_setPinDirection+0xd0>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	81 bb       	out	0x11, r24	; 17
 2a4:	08 95       	ret

000002a6 <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 2a6:	44 23       	and	r20, r20
 2a8:	a1 f1       	breq	.+104    	; 0x312 <DIO_WritePin+0x6c>
	{
		switch(Port)
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	89 f0       	breq	.+34     	; 0x2d0 <DIO_WritePin+0x2a>
 2ae:	28 f0       	brcs	.+10     	; 0x2ba <DIO_WritePin+0x14>
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	c9 f0       	breq	.+50     	; 0x2e6 <DIO_WritePin+0x40>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	11 f1       	breq	.+68     	; 0x2fc <DIO_WritePin+0x56>
 2b8:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 2ba:	2b b3       	in	r18, 0x1b	; 27
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_WritePin+0x20>
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	6a 95       	dec	r22
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_WritePin+0x1c>
 2ca:	82 2b       	or	r24, r18
 2cc:	8b bb       	out	0x1b, r24	; 27
			break;
 2ce:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 2d0:	28 b3       	in	r18, 0x18	; 24
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_WritePin+0x36>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_WritePin+0x32>
 2e0:	82 2b       	or	r24, r18
 2e2:	88 bb       	out	0x18, r24	; 24
			break;
 2e4:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 2e6:	25 b3       	in	r18, 0x15	; 21
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_WritePin+0x4c>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_WritePin+0x48>
 2f6:	82 2b       	or	r24, r18
 2f8:	85 bb       	out	0x15, r24	; 21
			break;
 2fa:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 2fc:	22 b3       	in	r18, 0x12	; 18
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_WritePin+0x62>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_WritePin+0x5e>
 30c:	82 2b       	or	r24, r18
 30e:	82 bb       	out	0x12, r24	; 18
			break;
 310:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	91 f0       	breq	.+36     	; 0x33a <DIO_WritePin+0x94>
 316:	28 f0       	brcs	.+10     	; 0x322 <DIO_WritePin+0x7c>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	d9 f0       	breq	.+54     	; 0x352 <DIO_WritePin+0xac>
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	29 f1       	breq	.+74     	; 0x36a <DIO_WritePin+0xc4>
 320:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 322:	2b b3       	in	r18, 0x1b	; 27
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_WritePin+0x88>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_WritePin+0x84>
 332:	80 95       	com	r24
 334:	82 23       	and	r24, r18
 336:	8b bb       	out	0x1b, r24	; 27
			break;
 338:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 33a:	28 b3       	in	r18, 0x18	; 24
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_WritePin+0xa0>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	6a 95       	dec	r22
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_WritePin+0x9c>
 34a:	80 95       	com	r24
 34c:	82 23       	and	r24, r18
 34e:	88 bb       	out	0x18, r24	; 24
			break;
 350:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 352:	25 b3       	in	r18, 0x15	; 21
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_WritePin+0xb8>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_WritePin+0xb4>
 362:	80 95       	com	r24
 364:	82 23       	and	r24, r18
 366:	85 bb       	out	0x15, r24	; 21
			break;
 368:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 36a:	22 b3       	in	r18, 0x12	; 18
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_WritePin+0xd0>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_WritePin+0xcc>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	82 bb       	out	0x12, r24	; 18
 380:	08 95       	ret

00000382 <DIO_ReadPin>:
	}
}

void DIO_ReadPin(uint8_t Port, uint8_t pin, uint8_t* val)
{
	switch(Port)
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	89 f0       	breq	.+34     	; 0x3a8 <DIO_ReadPin+0x26>
 386:	28 f0       	brcs	.+10     	; 0x392 <DIO_ReadPin+0x10>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	c9 f0       	breq	.+50     	; 0x3be <DIO_ReadPin+0x3c>
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	11 f1       	breq	.+68     	; 0x3d4 <DIO_ReadPin+0x52>
 390:	08 95       	ret
	{
		case DIO_PORTA:
		*val = GetBit(PORTA, pin);
 392:	8b b3       	in	r24, 0x1b	; 27
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_ReadPin+0x1a>
 398:	95 95       	asr	r25
 39a:	87 95       	ror	r24
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_ReadPin+0x16>
 3a0:	81 70       	andi	r24, 0x01	; 1
 3a2:	fa 01       	movw	r30, r20
 3a4:	80 83       	st	Z, r24
		break;
 3a6:	08 95       	ret
		
		case DIO_PORTB:
		*val = GetBit(PORTB, pin);
 3a8:	88 b3       	in	r24, 0x18	; 24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_ReadPin+0x30>
 3ae:	95 95       	asr	r25
 3b0:	87 95       	ror	r24
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_ReadPin+0x2c>
 3b6:	81 70       	andi	r24, 0x01	; 1
 3b8:	fa 01       	movw	r30, r20
 3ba:	80 83       	st	Z, r24
		break;
 3bc:	08 95       	ret
		
		case DIO_PORTC:
		*val = GetBit(PORTC, pin);
 3be:	85 b3       	in	r24, 0x15	; 21
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_ReadPin+0x46>
 3c4:	95 95       	asr	r25
 3c6:	87 95       	ror	r24
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_ReadPin+0x42>
 3cc:	81 70       	andi	r24, 0x01	; 1
 3ce:	fa 01       	movw	r30, r20
 3d0:	80 83       	st	Z, r24
		break;
 3d2:	08 95       	ret
		
		case DIO_PORTD:
		*val = GetBit(PORTD, pin);
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_ReadPin+0x5c>
 3da:	95 95       	asr	r25
 3dc:	87 95       	ror	r24
 3de:	6a 95       	dec	r22
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_ReadPin+0x58>
 3e2:	81 70       	andi	r24, 0x01	; 1
 3e4:	fa 01       	movw	r30, r20
 3e6:	80 83       	st	Z, r24
 3e8:	08 95       	ret

000003ea <LCD_WriteCommand>:
	
	#endif
}

void LCD_WriteCommand(uint8_t cmd)
{
 3ea:	cf 93       	push	r28
 3ec:	c8 2f       	mov	r28, r24
	uint8_t BIT4 = 0;
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_RS_PIN_ID, PIN_LOW);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	62 e0       	ldi	r22, 0x02	; 2
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	
	/*	Normal implementation	*/
	/*	PORTB = (cmd & 0x0F) | (PORTB & 0xF0);	*/
	
	/*	HARDWARE RESTRICTIONS	*/
	PORTB = ( (cmd >> 4) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 402:	88 b3       	in	r24, 0x18	; 24
 404:	9c 2f       	mov	r25, r28
 406:	92 95       	swap	r25
 408:	9f 70       	andi	r25, 0x0F	; 15
 40a:	97 70       	andi	r25, 0x07	; 7
 40c:	88 7f       	andi	r24, 0xF8	; 248
 40e:	89 2b       	or	r24, r25
 410:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(cmd, 7);
	if(BIT4)
 412:	cc 23       	and	r28, r28
 414:	24 f4       	brge	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		SetBit(PORTB, LCD_D7);
 416:	88 b3       	in	r24, 0x18	; 24
 418:	80 61       	ori	r24, 0x10	; 16
 41a:	88 bb       	out	0x18, r24	; 24
 41c:	03 c0       	rjmp	.+6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 41e:	88 b3       	in	r24, 0x18	; 24
 420:	8f 7e       	andi	r24, 0xEF	; 239
 422:	88 bb       	out	0x18, r24	; 24
	}

	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	62 e0       	ldi	r22, 0x02	; 2
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
 42e:	8f e1       	ldi	r24, 0x1F	; 31
 430:	9e e4       	ldi	r25, 0x4E	; 78
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	62 e0       	ldi	r22, 0x02	; 2
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	
	
	PORTB = ( (cmd) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 444:	88 b3       	in	r24, 0x18	; 24
 446:	9c 2f       	mov	r25, r28
 448:	97 70       	andi	r25, 0x07	; 7
 44a:	88 7f       	andi	r24, 0xF8	; 248
 44c:	89 2b       	or	r24, r25
 44e:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(cmd, 3);
	if(BIT4)
 450:	c3 ff       	sbrs	r28, 3
 452:	04 c0       	rjmp	.+8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	{
		SetBit(PORTB, LCD_D7);
 454:	88 b3       	in	r24, 0x18	; 24
 456:	80 61       	ori	r24, 0x10	; 16
 458:	88 bb       	out	0x18, r24	; 24
 45a:	03 c0       	rjmp	.+6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 45c:	88 b3       	in	r24, 0x18	; 24
 45e:	8f 7e       	andi	r24, 0xEF	; 239
 460:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	62 e0       	ldi	r22, 0x02	; 2
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
 46c:	8f e1       	ldi	r24, 0x1F	; 31
 46e:	9e e4       	ldi	r25, 0x4E	; 78
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	62 e0       	ldi	r22, 0x02	; 2
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
}
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <LCD_init>:
void LCD_init(void)
{
	#if (LCD_MODE == 4)

	/* Configure the direction for RS and E pins as output pins */
	DIO_setPinDirection(LCD_4BIT_CMD_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
 486:	41 e0       	ldi	r20, 0x01	; 1
 488:	63 e0       	ldi	r22, 0x03	; 3
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	62 e0       	ldi	r22, 0x02	; 2
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_setPinDirection>
	
	/* Configure the data port as output port */
	DIO_setPortDirection(LCD_4BIT_DATA_PORT_ID, PORT_OUTPUT);
 49a:	6f ef       	ldi	r22, 0xFF	; 255
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_setPortDirection>
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	89 ef       	ldi	r24, 0xF9	; 249
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <LCD_init+0x22>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <LCD_init+0x2c>
 4b2:	00 00       	nop
	
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */
	
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_WriteCommand(LCD_TWO_LINES_4_BITS_MODE);
 4b4:	88 e2       	ldi	r24, 0x28	; 40
 4b6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_WriteCommand>
	LCD_WriteCommand(LCD_CURSOR_ON_BLINK); /* cursor on and blinking */
 4ba:	8f e0       	ldi	r24, 0x0F	; 15
 4bc:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_WriteCommand>
	LCD_WriteCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_WriteCommand>
 4c6:	08 95       	ret

000004c8 <LCD_WriteChar>:
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
}

void LCD_WriteChar(uint8_t chr)
{
 4c8:	cf 93       	push	r28
 4ca:	c8 2f       	mov	r28, r24
	uint8_t BIT4 = 0;
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_RS_PIN_ID, PIN_HIGH);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	63 e0       	ldi	r22, 0x03	; 3
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	62 e0       	ldi	r22, 0x02	; 2
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_RW_PIN_ID, PIN_LOW);
 4e0:	40 e0       	ldi	r20, 0x00	; 0
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	
	/*	Normal implementation	*/
	/*	PORTB = (cmd & 0x0F) | (PORTB & 0xF0);	*/
	
	/*	HARDWARE RESTRICTIONS	*/
	PORTB = ( (chr >> 4) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 4ea:	88 b3       	in	r24, 0x18	; 24
 4ec:	9c 2f       	mov	r25, r28
 4ee:	92 95       	swap	r25
 4f0:	9f 70       	andi	r25, 0x0F	; 15
 4f2:	97 70       	andi	r25, 0x07	; 7
 4f4:	88 7f       	andi	r24, 0xF8	; 248
 4f6:	89 2b       	or	r24, r25
 4f8:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(chr, 7);
	if(BIT4)
 4fa:	cc 23       	and	r28, r28
 4fc:	24 f4       	brge	.+8      	; 0x506 <LCD_WriteChar+0x3e>
	{
		SetBit(PORTB, LCD_D7);
 4fe:	88 b3       	in	r24, 0x18	; 24
 500:	80 61       	ori	r24, 0x10	; 16
 502:	88 bb       	out	0x18, r24	; 24
 504:	03 c0       	rjmp	.+6      	; 0x50c <LCD_WriteChar+0x44>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 506:	88 b3       	in	r24, 0x18	; 24
 508:	8f 7e       	andi	r24, 0xEF	; 239
 50a:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 50c:	41 e0       	ldi	r20, 0x01	; 1
 50e:	62 e0       	ldi	r22, 0x02	; 2
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
 516:	8f e1       	ldi	r24, 0x1F	; 31
 518:	9e e4       	ldi	r25, 0x4E	; 78
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <LCD_WriteChar+0x52>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <LCD_WriteChar+0x58>
 520:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	62 e0       	ldi	r22, 0x02	; 2
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
	
	PORTB = ( (chr) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 52c:	88 b3       	in	r24, 0x18	; 24
 52e:	9c 2f       	mov	r25, r28
 530:	97 70       	andi	r25, 0x07	; 7
 532:	88 7f       	andi	r24, 0xF8	; 248
 534:	89 2b       	or	r24, r25
 536:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(chr, 3);
	if(BIT4)
 538:	c3 ff       	sbrs	r28, 3
 53a:	04 c0       	rjmp	.+8      	; 0x544 <LCD_WriteChar+0x7c>
	{
		SetBit(PORTB, LCD_D7);
 53c:	88 b3       	in	r24, 0x18	; 24
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	88 bb       	out	0x18, r24	; 24
 542:	03 c0       	rjmp	.+6      	; 0x54a <LCD_WriteChar+0x82>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 544:	88 b3       	in	r24, 0x18	; 24
 546:	8f 7e       	andi	r24, 0xEF	; 239
 548:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 54a:	41 e0       	ldi	r20, 0x01	; 1
 54c:	62 e0       	ldi	r22, 0x02	; 2
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
 554:	8f e1       	ldi	r24, 0x1F	; 31
 556:	9e e4       	ldi	r25, 0x4E	; 78
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	f1 f7       	brne	.-4      	; 0x558 <LCD_WriteChar+0x90>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <LCD_WriteChar+0x96>
 55e:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_WritePin>
}
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <LCD_WriteString>:

void LCD_WriteString(const uint8_t *str)
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	ec 01       	movw	r28, r24
	while(*str != '\0')
 574:	03 c0       	rjmp	.+6      	; 0x57c <LCD_WriteString+0xe>
	{
		LCD_WriteChar(*str++);
 576:	21 96       	adiw	r28, 0x01	; 1
 578:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_WriteChar>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
}

void LCD_WriteString(const uint8_t *str)
{
	while(*str != '\0')
 57c:	88 81       	ld	r24, Y
 57e:	81 11       	cpse	r24, r1
 580:	fa cf       	rjmp	.-12     	; 0x576 <LCD_WriteString+0x8>
	{
		LCD_WriteChar(*str++);
	}
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <LCD_moveCursor>:
void LCD_moveCursor(uint8_t row,uint8_t col)
{
	uint8_t lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	31 f0       	breq	.+12     	; 0x598 <LCD_moveCursor+0x10>
 58c:	70 f0       	brcs	.+28     	; 0x5aa <LCD_moveCursor+0x22>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	31 f0       	breq	.+12     	; 0x59e <LCD_moveCursor+0x16>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	39 f0       	breq	.+14     	; 0x5a4 <LCD_moveCursor+0x1c>
 596:	0a c0       	rjmp	.+20     	; 0x5ac <LCD_moveCursor+0x24>
	{
		case 0:
		lcd_memory_address=col;
		break;
		case 1:
		lcd_memory_address=col+0x40;
 598:	90 e4       	ldi	r25, 0x40	; 64
 59a:	96 0f       	add	r25, r22
		break;
 59c:	07 c0       	rjmp	.+14     	; 0x5ac <LCD_moveCursor+0x24>
		case 2:
		lcd_memory_address=col+0x40;
 59e:	90 e4       	ldi	r25, 0x40	; 64
 5a0:	96 0f       	add	r25, r22
		break;
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <LCD_moveCursor+0x24>
		case 3:
		lcd_memory_address=col+0x40;
 5a4:	90 e4       	ldi	r25, 0x40	; 64
 5a6:	96 0f       	add	r25, r22
		break;
 5a8:	01 c0       	rjmp	.+2      	; 0x5ac <LCD_moveCursor+0x24>
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
	{
		case 0:
		lcd_memory_address=col;
 5aa:	96 2f       	mov	r25, r22
		case 3:
		lcd_memory_address=col+0x40;
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_WriteCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 5ac:	89 2f       	mov	r24, r25
 5ae:	80 68       	ori	r24, 0x80	; 128
 5b0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_WriteCommand>
 5b4:	08 95       	ret

000005b6 <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_WriteCommand(LCD_CLEAR_COMMAND);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <LCD_WriteCommand>
 5bc:	08 95       	ret

000005be <main>:
		//DIO_WritePin(DIO_PORTB, DIO_PIN7, PIN_HIGH);
    }
}
*/

	LCD_init();
 5be:	0e 94 43 02 	call	0x486	; 0x486 <LCD_init>
	KeyPad_Init();
 5c2:	0e 94 41 00 	call	0x82	; 0x82 <KeyPad_Init>
	//DDRB = (1<<7);
	LCD_Clear();
 5c6:	0e 94 db 02 	call	0x5b6	; 0x5b6 <LCD_Clear>
	
	const uint8_t* str = "Mohamed Abdelsamie ";
	LCD_WriteString(str);
 5ca:	80 e7       	ldi	r24, 0x70	; 112
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 b7 02 	call	0x56e	; 0x56e <LCD_WriteString>
	LCD_moveCursor(1, 0);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_moveCursor>
	uint8_t x;
	
	while(1)
	{
		x = KeyPad_GetValue();
 5da:	0e 94 7e 00 	call	0xfc	; 0xfc <KeyPad_GetValue>
		
		if(x != 0)
 5de:	88 23       	and	r24, r24
 5e0:	e1 f3       	breq	.-8      	; 0x5da <main+0x1c>
			LCD_WriteChar(x);
 5e2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <LCD_WriteChar>
 5e6:	f9 cf       	rjmp	.-14     	; 0x5da <main+0x1c>

000005e8 <_exit>:
 5e8:	f8 94       	cli

000005ea <__stop_program>:
 5ea:	ff cf       	rjmp	.-2      	; 0x5ea <__stop_program>
