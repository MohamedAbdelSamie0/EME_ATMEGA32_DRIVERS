
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800060  00800060  00000520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bcc  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a6  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ee  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f4  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b9  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 37       	cpi	r26, 0x78	; 120
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  74:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <uart_callback>:
volatile uint8_t uart_flag = 0;

void uart_callback(uint8_t data)
{
	static uint32_t buffer_idx = 0;
	buffer[buffer_idx] = data;
  7c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  84:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  88:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  8c:	fa 01       	movw	r30, r20
  8e:	e2 59       	subi	r30, 0x92	; 146
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	80 83       	st	Z, r24
	
	if(buffer_idx ==(sizeof(buffer) / sizeof(buffer[0])-1) || buffer[buffer_idx] == '\n' || buffer[buffer_idx] == '\r')
  94:	49 30       	cpi	r20, 0x09	; 9
  96:	51 05       	cpc	r21, r1
  98:	61 05       	cpc	r22, r1
  9a:	71 05       	cpc	r23, r1
  9c:	61 f0       	breq	.+24     	; 0xb6 <uart_callback+0x3a>
  9e:	fa 01       	movw	r30, r20
  a0:	e2 59       	subi	r30, 0x92	; 146
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 81       	ld	r24, Z
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	31 f0       	breq	.+12     	; 0xb6 <uart_callback+0x3a>
  aa:	fa 01       	movw	r30, r20
  ac:	e2 59       	subi	r30, 0x92	; 146
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	80 81       	ld	r24, Z
  b2:	8d 30       	cpi	r24, 0x0D	; 13
  b4:	81 f4       	brne	.+32     	; 0xd6 <uart_callback+0x5a>
	{
		buffer[buffer_idx] = '\0';
  b6:	fa 01       	movw	r30, r20
  b8:	e2 59       	subi	r30, 0x92	; 146
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	10 82       	st	Z, r1
		buffer_idx = 0;
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ca:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		uart_flag = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <uart_flag>
  d4:	08 95       	ret
	}
	else
	{
		buffer_idx++;
  d6:	4f 5f       	subi	r20, 0xFF	; 255
  d8:	5f 4f       	sbci	r21, 0xFF	; 255
  da:	6f 4f       	sbci	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ea:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  ee:	08 95       	ret

000000f0 <main>:

UART_ConfigType USART_CONFIGURATION;
int main(void)
{
	uint8_t *str_test = 0;
	USART_CONFIGURATION.baud_rate = 9600;
  f0:	e7 e6       	ldi	r30, 0x67	; 103
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	95 e2       	ldi	r25, 0x25	; 37
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	83 83       	std	Z+3, r24	; 0x03
  fe:	94 83       	std	Z+4, r25	; 0x04
 100:	a5 83       	std	Z+5, r26	; 0x05
 102:	b6 83       	std	Z+6, r27	; 0x06
	USART_CONFIGURATION.data_bits = Eight_bits;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
	USART_CONFIGURATION.parity = Disable;
 108:	11 82       	std	Z+1, r1	; 0x01
	USART_CONFIGURATION.stop_bit = one_bit;
 10a:	12 82       	std	Z+2, r1	; 0x02
	
	UART_init(&USART_CONFIGURATION);
 10c:	cf 01       	movw	r24, r30
 10e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <UART_init>
	
	USART_setCallback(uart_callback);
 112:	8e e3       	ldi	r24, 0x3E	; 62
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 21 01 	call	0x242	; 0x242 <USART_setCallback>
	
	SetBit(SREG, 7);	/* enable global interrupts	*/
 11a:	8f b7       	in	r24, 0x3f	; 63
 11c:	80 68       	ori	r24, 0x80	; 128
 11e:	8f bf       	out	0x3f, r24	; 63
    /* Replace with your application code */
    while (1) 
    {
		UART_receiveString(str_test);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 b4 00 	call	0x168	; 0x168 <UART_receiveString>
		
		UART_sendString(str_test);
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 a1 00 	call	0x142	; 0x142 <UART_sendString>
 130:	f7 cf       	rjmp	.-18     	; 0x120 <main+0x30>

00000132 <UART_sendByte>:
 * Disable the receiving interrupt
 * Re-entrance: Non re-entrant
 */
void UART_disableRX_IE(void)
{
	ClearBit(USART_CTRLB_REG, RXCIE_BIT);
 132:	5d 9b       	sbis	0x0b, 5	; 11
 134:	fe cf       	rjmp	.-4      	; 0x132 <UART_sendByte>
 136:	8c b9       	out	0x0c, r24	; 12
 138:	08 95       	ret

0000013a <UART_recieveByte>:
 13a:	5f 9b       	sbis	0x0b, 7	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <UART_recieveByte>
 13e:	8c b1       	in	r24, 0x0c	; 12
 140:	08 95       	ret

00000142 <UART_sendString>:
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	8c 01       	movw	r16, r24
 14a:	c0 e0       	ldi	r28, 0x00	; 0
 14c:	03 c0       	rjmp	.+6      	; 0x154 <UART_sendString+0x12>
 14e:	0e 94 99 00 	call	0x132	; 0x132 <UART_sendByte>
 152:	cf 5f       	subi	r28, 0xFF	; 255
 154:	f8 01       	movw	r30, r16
 156:	ec 0f       	add	r30, r28
 158:	f1 1d       	adc	r31, r1
 15a:	80 81       	ld	r24, Z
 15c:	81 11       	cpse	r24, r1
 15e:	f7 cf       	rjmp	.-18     	; 0x14e <UART_sendString+0xc>
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <UART_receiveString>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_recieveByte>
 172:	88 83       	st	Y, r24
 174:	fe 01       	movw	r30, r28
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	80 81       	ld	r24, Z
 17a:	81 30       	cpi	r24, 0x01	; 1
 17c:	c1 f7       	brne	.-16     	; 0x16e <UART_receiveString+0x6>
 17e:	10 82       	st	Z, r1
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <UART_setBaudRate>:
{
	uint16_t ubrr = 0;
	
	/*	in asynchronous mode double transmission speed is used	*/
	#if UART_MODE == ASYNCHRONOUS
		ubrr = ( F_CPU / (8 * baudrate) ) - 1;
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	9c 01       	movw	r18, r24
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	74 e2       	ldi	r23, 0x24	; 36
 19c:	84 ef       	ldi	r24, 0xF4	; 244
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 32 02 	call	0x464	; 0x464 <__udivmodsi4>
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	31 09       	sbc	r19, r1
	#else
		ubrr = (F_CPU / (16 * baudrate) - 1);
	#endif
	
	ubrr = round(ubrr);	/* round the value to get coorect integer	*/
 1a8:	b9 01       	movw	r22, r18
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__floatunsisf>
 1b2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <round>
 1b6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__fixunssfsi>
	
	if(ubrr < 255)
 1ba:	6f 3f       	cpi	r22, 0xFF	; 255
 1bc:	71 05       	cpc	r23, r1
 1be:	10 f4       	brcc	.+4      	; 0x1c4 <UART_setBaudRate+0x3e>
	{
		USART_BRL_REG = (uint8_t)(ubrr);
 1c0:	69 b9       	out	0x09, r22	; 9
 1c2:	08 95       	ret
	}
	else
	{
		USART_BRH_REG = (uint8_t)(ubrr);
 1c4:	60 bd       	out	0x20, r22	; 32
		USART_BRL_REG = 0x0F & (uint8_t)(ubrr >> 8);
 1c6:	87 2f       	mov	r24, r23
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	89 b9       	out	0x09, r24	; 9
 1cc:	08 95       	ret

000001ce <UART_init>:
 *	Description :
 *	Initialization function for the UART device; Asynchronus mode only for now
 *	Re-entrance: Non re-entrant
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
 1ce:	fc 01       	movw	r30, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * RXB8 & TXB8 are read for the 9th bit in 9-bit data mode
		***********************************************************************/
		#elif UART_INTERRUPT_MODE == IRQ_DISABLE
			USART_CTRLB_REG |= (1<<RXEN_BIT) | (1<<TXEN_BIT);
 1d0:	8a b1       	in	r24, 0x0a	; 10
 1d2:	88 61       	ori	r24, 0x18	; 24
 1d4:	8a b9       	out	0x0a, r24	; 10
			
			/*	UCSZ2_BIT = 1 For 9-bit data mode only, 0 for other	*/
			if(Config_Ptr->data_bits == Nine_bits)
 1d6:	80 81       	ld	r24, Z
 1d8:	87 30       	cpi	r24, 0x07	; 7
 1da:	21 f4       	brne	.+8      	; 0x1e4 <UART_init+0x16>
			{
				SetBit(USART_CTRLB_REG, UCSZ2_BIT);
 1dc:	8a b1       	in	r24, 0x0a	; 10
 1de:	84 60       	ori	r24, 0x04	; 4
 1e0:	8a b9       	out	0x0a, r24	; 10
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <UART_init+0x1c>
			}
			else
			{
				ClearBit(USART_CTRLB_REG, UCSZ2_BIT);
 1e4:	8a b1       	in	r24, 0x0a	; 10
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	8a b9       	out	0x0a, r24	; 10
			}
		#endif
		
		#if UART_MODE == ASYNCHRONOUS
			USART_CTRLA_REG |= (1<<U2X_BIT);	/* U2X = 1 for double transmission speed */
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	82 60       	ori	r24, 0x02	; 2
 1ee:	8b b9       	out	0x0b, r24	; 11
			 * UPM1:0  = 00 Disable parity bit
			 * USBS    = 0 One stop bit
			 * UCSZ1:0 = 11 For 8-bit data mode
			 * UCPOL   = 0 Used with the Synchronous operation only
			 ***********************************************************************/
			USART_CTRLB_REG |= (1 << URSEL_BIT) | (Config_Ptr->parity << UPM0_BIT) | (Config_Ptr->stop_bit << USBS_BIT);
 1f0:	4a b1       	in	r20, 0x0a	; 10
 1f2:	81 81       	ldd	r24, Z+1	; 0x01
 1f4:	20 e1       	ldi	r18, 0x10	; 16
 1f6:	82 9f       	mul	r24, r18
 1f8:	c0 01       	movw	r24, r0
 1fa:	11 24       	eor	r1, r1
 1fc:	92 81       	ldd	r25, Z+2	; 0x02
 1fe:	29 2f       	mov	r18, r25
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	22 0f       	add	r18, r18
 208:	33 1f       	adc	r19, r19
 20a:	22 0f       	add	r18, r18
 20c:	33 1f       	adc	r19, r19
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	28 2b       	or	r18, r24
 212:	24 2b       	or	r18, r20
 214:	2a b9       	out	0x0a, r18	; 10
			/*	UCSZ1:UCSZ0 = 11 For 9-bit AND 8-bit data mode only 0 for others	*/
			if(Config_Ptr->data_bits == Nine_bits)
 216:	90 81       	ld	r25, Z
 218:	97 30       	cpi	r25, 0x07	; 7
 21a:	39 f4       	brne	.+14     	; 0x22a <UART_init+0x5c>
			{
				SetBit(USART_CTRLC_REG, UCSZ1_BIT);
 21c:	80 b5       	in	r24, 0x20	; 32
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	80 bd       	out	0x20, r24	; 32
				SetBit(USART_CTRLC_REG, UCSZ0_BIT);
 222:	80 b5       	in	r24, 0x20	; 32
 224:	82 60       	ori	r24, 0x02	; 2
 226:	80 bd       	out	0x20, r24	; 32
 228:	07 c0       	rjmp	.+14     	; 0x238 <UART_init+0x6a>
			}
			else
			{
				USART_CTRLB_REG |= (Config_Ptr->data_bits << UCSZ0_BIT);
 22a:	8a b1       	in	r24, 0x0a	; 10
 22c:	29 2f       	mov	r18, r25
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	28 2b       	or	r18, r24
 236:	2a b9       	out	0x0a, r18	; 10
		#endif
		
	#endif
	
	/* call this function to set UART baudrate	*/
	UART_setBaudRate(Config_Ptr->baud_rate);
 238:	83 81       	ldd	r24, Z+3	; 0x03
 23a:	94 81       	ldd	r25, Z+4	; 0x04
 23c:	0e 94 c3 00 	call	0x186	; 0x186 <UART_setBaudRate>
 240:	08 95       	ret

00000242 <USART_setCallback>:
void USART_setCallback(void (*ptr)(uint8_t))
{
	#if UART_TRANSMISSION_MODE == TX
		g_callBackPtr = *ptr;
	#else
		g_callBackPtr = *ptr;
 242:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <g_callBackPtr+0x1>
 246:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <g_callBackPtr>
 24a:	08 95       	ret

0000024c <__vector_13>:
}

/*	USART ISR	*/
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if(g_callBackPtr!= (void*)0 )
 26e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <g_callBackPtr>
 272:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <g_callBackPtr+0x1>
 276:	30 97       	sbiw	r30, 0x00	; 0
 278:	11 f0       	breq	.+4      	; 0x27e <__vector_13+0x32>
	{
		g_callBackPtr(USART_DATA_REG);
 27a:	8c b1       	in	r24, 0x0c	; 12
 27c:	09 95       	icall
	}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__fixunssfsi>:
 2a0:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_splitA>
 2a4:	88 f0       	brcs	.+34     	; 0x2c8 <__fixunssfsi+0x28>
 2a6:	9f 57       	subi	r25, 0x7F	; 127
 2a8:	98 f0       	brcs	.+38     	; 0x2d0 <__fixunssfsi+0x30>
 2aa:	b9 2f       	mov	r27, r25
 2ac:	99 27       	eor	r25, r25
 2ae:	b7 51       	subi	r27, 0x17	; 23
 2b0:	b0 f0       	brcs	.+44     	; 0x2de <__fixunssfsi+0x3e>
 2b2:	e1 f0       	breq	.+56     	; 0x2ec <__fixunssfsi+0x4c>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	88 1f       	adc	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	1a f0       	brmi	.+6      	; 0x2c4 <__fixunssfsi+0x24>
 2be:	ba 95       	dec	r27
 2c0:	c9 f7       	brne	.-14     	; 0x2b4 <__fixunssfsi+0x14>
 2c2:	14 c0       	rjmp	.+40     	; 0x2ec <__fixunssfsi+0x4c>
 2c4:	b1 30       	cpi	r27, 0x01	; 1
 2c6:	91 f0       	breq	.+36     	; 0x2ec <__fixunssfsi+0x4c>
 2c8:	0e 94 de 01 	call	0x3bc	; 0x3bc <__fp_zero>
 2cc:	b1 e0       	ldi	r27, 0x01	; 1
 2ce:	08 95       	ret
 2d0:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__fp_zero>
 2d4:	67 2f       	mov	r22, r23
 2d6:	78 2f       	mov	r23, r24
 2d8:	88 27       	eor	r24, r24
 2da:	b8 5f       	subi	r27, 0xF8	; 248
 2dc:	39 f0       	breq	.+14     	; 0x2ec <__fixunssfsi+0x4c>
 2de:	b9 3f       	cpi	r27, 0xF9	; 249
 2e0:	cc f3       	brlt	.-14     	; 0x2d4 <__fixunssfsi+0x34>
 2e2:	86 95       	lsr	r24
 2e4:	77 95       	ror	r23
 2e6:	67 95       	ror	r22
 2e8:	b3 95       	inc	r27
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <__fixunssfsi+0x42>
 2ec:	3e f4       	brtc	.+14     	; 0x2fc <__fixunssfsi+0x5c>
 2ee:	90 95       	com	r25
 2f0:	80 95       	com	r24
 2f2:	70 95       	com	r23
 2f4:	61 95       	neg	r22
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	8f 4f       	sbci	r24, 0xFF	; 255
 2fa:	9f 4f       	sbci	r25, 0xFF	; 255
 2fc:	08 95       	ret

000002fe <__floatunsisf>:
 2fe:	e8 94       	clt
 300:	09 c0       	rjmp	.+18     	; 0x314 <__floatsisf+0x12>

00000302 <__floatsisf>:
 302:	97 fb       	bst	r25, 7
 304:	3e f4       	brtc	.+14     	; 0x314 <__floatsisf+0x12>
 306:	90 95       	com	r25
 308:	80 95       	com	r24
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	99 23       	and	r25, r25
 316:	a9 f0       	breq	.+42     	; 0x342 <__floatsisf+0x40>
 318:	f9 2f       	mov	r31, r25
 31a:	96 e9       	ldi	r25, 0x96	; 150
 31c:	bb 27       	eor	r27, r27
 31e:	93 95       	inc	r25
 320:	f6 95       	lsr	r31
 322:	87 95       	ror	r24
 324:	77 95       	ror	r23
 326:	67 95       	ror	r22
 328:	b7 95       	ror	r27
 32a:	f1 11       	cpse	r31, r1
 32c:	f8 cf       	rjmp	.-16     	; 0x31e <__floatsisf+0x1c>
 32e:	fa f4       	brpl	.+62     	; 0x36e <__floatsisf+0x6c>
 330:	bb 0f       	add	r27, r27
 332:	11 f4       	brne	.+4      	; 0x338 <__floatsisf+0x36>
 334:	60 ff       	sbrs	r22, 0
 336:	1b c0       	rjmp	.+54     	; 0x36e <__floatsisf+0x6c>
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	8f 4f       	sbci	r24, 0xFF	; 255
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	16 c0       	rjmp	.+44     	; 0x36e <__floatsisf+0x6c>
 342:	88 23       	and	r24, r24
 344:	11 f0       	breq	.+4      	; 0x34a <__floatsisf+0x48>
 346:	96 e9       	ldi	r25, 0x96	; 150
 348:	11 c0       	rjmp	.+34     	; 0x36c <__floatsisf+0x6a>
 34a:	77 23       	and	r23, r23
 34c:	21 f0       	breq	.+8      	; 0x356 <__floatsisf+0x54>
 34e:	9e e8       	ldi	r25, 0x8E	; 142
 350:	87 2f       	mov	r24, r23
 352:	76 2f       	mov	r23, r22
 354:	05 c0       	rjmp	.+10     	; 0x360 <__floatsisf+0x5e>
 356:	66 23       	and	r22, r22
 358:	71 f0       	breq	.+28     	; 0x376 <__floatsisf+0x74>
 35a:	96 e8       	ldi	r25, 0x86	; 134
 35c:	86 2f       	mov	r24, r22
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	60 e0       	ldi	r22, 0x00	; 0
 362:	2a f0       	brmi	.+10     	; 0x36e <__floatsisf+0x6c>
 364:	9a 95       	dec	r25
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	da f7       	brpl	.-10     	; 0x364 <__floatsisf+0x62>
 36e:	88 0f       	add	r24, r24
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	97 f9       	bld	r25, 7
 376:	08 95       	ret

00000378 <__fp_split3>:
 378:	57 fd       	sbrc	r21, 7
 37a:	90 58       	subi	r25, 0x80	; 128
 37c:	44 0f       	add	r20, r20
 37e:	55 1f       	adc	r21, r21
 380:	59 f0       	breq	.+22     	; 0x398 <__fp_splitA+0x10>
 382:	5f 3f       	cpi	r21, 0xFF	; 255
 384:	71 f0       	breq	.+28     	; 0x3a2 <__fp_splitA+0x1a>
 386:	47 95       	ror	r20

00000388 <__fp_splitA>:
 388:	88 0f       	add	r24, r24
 38a:	97 fb       	bst	r25, 7
 38c:	99 1f       	adc	r25, r25
 38e:	61 f0       	breq	.+24     	; 0x3a8 <__fp_splitA+0x20>
 390:	9f 3f       	cpi	r25, 0xFF	; 255
 392:	79 f0       	breq	.+30     	; 0x3b2 <__fp_splitA+0x2a>
 394:	87 95       	ror	r24
 396:	08 95       	ret
 398:	12 16       	cp	r1, r18
 39a:	13 06       	cpc	r1, r19
 39c:	14 06       	cpc	r1, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	f2 cf       	rjmp	.-28     	; 0x386 <__fp_split3+0xe>
 3a2:	46 95       	lsr	r20
 3a4:	f1 df       	rcall	.-30     	; 0x388 <__fp_splitA>
 3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <__fp_splitA+0x30>
 3a8:	16 16       	cp	r1, r22
 3aa:	17 06       	cpc	r1, r23
 3ac:	18 06       	cpc	r1, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	f1 cf       	rjmp	.-30     	; 0x394 <__fp_splitA+0xc>
 3b2:	86 95       	lsr	r24
 3b4:	71 05       	cpc	r23, r1
 3b6:	61 05       	cpc	r22, r1
 3b8:	08 94       	sec
 3ba:	08 95       	ret

000003bc <__fp_zero>:
 3bc:	e8 94       	clt

000003be <__fp_szero>:
 3be:	bb 27       	eor	r27, r27
 3c0:	66 27       	eor	r22, r22
 3c2:	77 27       	eor	r23, r23
 3c4:	cb 01       	movw	r24, r22
 3c6:	97 f9       	bld	r25, 7
 3c8:	08 95       	ret

000003ca <round>:
 3ca:	0e 94 c4 01 	call	0x388	; 0x388 <__fp_splitA>
 3ce:	e8 f0       	brcs	.+58     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3d0:	9e 37       	cpi	r25, 0x7E	; 126
 3d2:	e8 f0       	brcs	.+58     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3d4:	96 39       	cpi	r25, 0x96	; 150
 3d6:	b8 f4       	brcc	.+46     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3d8:	9e 38       	cpi	r25, 0x8E	; 142
 3da:	48 f4       	brcc	.+18     	; 0x3ee <round+0x24>
 3dc:	67 2f       	mov	r22, r23
 3de:	78 2f       	mov	r23, r24
 3e0:	88 27       	eor	r24, r24
 3e2:	98 5f       	subi	r25, 0xF8	; 248
 3e4:	f9 cf       	rjmp	.-14     	; 0x3d8 <round+0xe>
 3e6:	86 95       	lsr	r24
 3e8:	77 95       	ror	r23
 3ea:	67 95       	ror	r22
 3ec:	93 95       	inc	r25
 3ee:	95 39       	cpi	r25, 0x95	; 149
 3f0:	d0 f3       	brcs	.-12     	; 0x3e6 <round+0x1c>
 3f2:	b6 2f       	mov	r27, r22
 3f4:	b1 70       	andi	r27, 0x01	; 1
 3f6:	6b 0f       	add	r22, r27
 3f8:	71 1d       	adc	r23, r1
 3fa:	81 1d       	adc	r24, r1
 3fc:	20 f4       	brcc	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	87 95       	ror	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	93 95       	inc	r25
 406:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_mintl>
 40a:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_mpack>
 40e:	0c 94 df 01 	jmp	0x3be	; 0x3be <__fp_szero>

00000412 <__fp_mintl>:
 412:	88 23       	and	r24, r24
 414:	71 f4       	brne	.+28     	; 0x432 <__fp_mintl+0x20>
 416:	77 23       	and	r23, r23
 418:	21 f0       	breq	.+8      	; 0x422 <__fp_mintl+0x10>
 41a:	98 50       	subi	r25, 0x08	; 8
 41c:	87 2b       	or	r24, r23
 41e:	76 2f       	mov	r23, r22
 420:	07 c0       	rjmp	.+14     	; 0x430 <__fp_mintl+0x1e>
 422:	66 23       	and	r22, r22
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_mintl+0x18>
 426:	99 27       	eor	r25, r25
 428:	0d c0       	rjmp	.+26     	; 0x444 <__fp_mintl+0x32>
 42a:	90 51       	subi	r25, 0x10	; 16
 42c:	86 2b       	or	r24, r22
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	2a f0       	brmi	.+10     	; 0x43e <__fp_mintl+0x2c>
 434:	9a 95       	dec	r25
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	88 1f       	adc	r24, r24
 43c:	da f7       	brpl	.-10     	; 0x434 <__fp_mintl+0x22>
 43e:	88 0f       	add	r24, r24
 440:	96 95       	lsr	r25
 442:	87 95       	ror	r24
 444:	97 f9       	bld	r25, 7
 446:	08 95       	ret

00000448 <__fp_mpack>:
 448:	9f 3f       	cpi	r25, 0xFF	; 255
 44a:	31 f0       	breq	.+12     	; 0x458 <__fp_mpack_finite+0xc>

0000044c <__fp_mpack_finite>:
 44c:	91 50       	subi	r25, 0x01	; 1
 44e:	20 f4       	brcc	.+8      	; 0x458 <__fp_mpack_finite+0xc>
 450:	87 95       	ror	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	88 0f       	add	r24, r24
 45a:	91 1d       	adc	r25, r1
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	97 f9       	bld	r25, 7
 462:	08 95       	ret

00000464 <__udivmodsi4>:
 464:	a1 e2       	ldi	r26, 0x21	; 33
 466:	1a 2e       	mov	r1, r26
 468:	aa 1b       	sub	r26, r26
 46a:	bb 1b       	sub	r27, r27
 46c:	fd 01       	movw	r30, r26
 46e:	0d c0       	rjmp	.+26     	; 0x48a <__udivmodsi4_ep>

00000470 <__udivmodsi4_loop>:
 470:	aa 1f       	adc	r26, r26
 472:	bb 1f       	adc	r27, r27
 474:	ee 1f       	adc	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	a2 17       	cp	r26, r18
 47a:	b3 07       	cpc	r27, r19
 47c:	e4 07       	cpc	r30, r20
 47e:	f5 07       	cpc	r31, r21
 480:	20 f0       	brcs	.+8      	; 0x48a <__udivmodsi4_ep>
 482:	a2 1b       	sub	r26, r18
 484:	b3 0b       	sbc	r27, r19
 486:	e4 0b       	sbc	r30, r20
 488:	f5 0b       	sbc	r31, r21

0000048a <__udivmodsi4_ep>:
 48a:	66 1f       	adc	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	88 1f       	adc	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	1a 94       	dec	r1
 494:	69 f7       	brne	.-38     	; 0x470 <__udivmodsi4_loop>
 496:	60 95       	com	r22
 498:	70 95       	com	r23
 49a:	80 95       	com	r24
 49c:	90 95       	com	r25
 49e:	9b 01       	movw	r18, r22
 4a0:	ac 01       	movw	r20, r24
 4a2:	bd 01       	movw	r22, r26
 4a4:	cf 01       	movw	r24, r30
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
