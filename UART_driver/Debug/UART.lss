
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800060  00800060  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b77  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000753  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004de  00000000  00000000  000016ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d7  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d5  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 37       	cpi	r26, 0x78	; 120
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  74:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <uart_callback>:
volatile uint8_t uart_flag = 0;

void uart_callback(uint8_t data)
{
	static uint32_t buffer_idx = 0;
	buffer[buffer_idx] = data;
  7c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  80:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  84:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  88:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  8c:	fa 01       	movw	r30, r20
  8e:	e2 59       	subi	r30, 0x92	; 146
  90:	ff 4f       	sbci	r31, 0xFF	; 255
  92:	80 83       	st	Z, r24
	
	if(buffer_idx ==(sizeof(buffer) / sizeof(buffer[0])-1) || buffer[buffer_idx] == '\n' || buffer[buffer_idx] == '\r')
  94:	49 30       	cpi	r20, 0x09	; 9
  96:	51 05       	cpc	r21, r1
  98:	61 05       	cpc	r22, r1
  9a:	71 05       	cpc	r23, r1
  9c:	61 f0       	breq	.+24     	; 0xb6 <uart_callback+0x3a>
  9e:	fa 01       	movw	r30, r20
  a0:	e2 59       	subi	r30, 0x92	; 146
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 81       	ld	r24, Z
  a6:	8a 30       	cpi	r24, 0x0A	; 10
  a8:	31 f0       	breq	.+12     	; 0xb6 <uart_callback+0x3a>
  aa:	fa 01       	movw	r30, r20
  ac:	e2 59       	subi	r30, 0x92	; 146
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	80 81       	ld	r24, Z
  b2:	8d 30       	cpi	r24, 0x0D	; 13
  b4:	81 f4       	brne	.+32     	; 0xd6 <uart_callback+0x5a>
	{
		buffer[buffer_idx] = '\0';
  b6:	fa 01       	movw	r30, r20
  b8:	e2 59       	subi	r30, 0x92	; 146
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	10 82       	st	Z, r1
		buffer_idx = 0;
  be:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ca:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		uart_flag = 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <uart_flag>
  d4:	08 95       	ret
	}
	else
	{
		buffer_idx++;
  d6:	4f 5f       	subi	r20, 0xFF	; 255
  d8:	5f 4f       	sbci	r21, 0xFF	; 255
  da:	6f 4f       	sbci	r22, 0xFF	; 255
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
  e2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e6:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  ea:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  ee:	08 95       	ret

000000f0 <main>:
UART_ConfigType USART_CONFIGURATION;
int main(void)
{
	//SetBit(DDRD, 1);
	//uint8_t *str_test = 0;
	USART_CONFIGURATION.baud_rate = 9600;
  f0:	e7 e6       	ldi	r30, 0x67	; 103
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 e8       	ldi	r24, 0x80	; 128
  f6:	95 e2       	ldi	r25, 0x25	; 37
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	83 83       	std	Z+3, r24	; 0x03
  fe:	94 83       	std	Z+4, r25	; 0x04
 100:	a5 83       	std	Z+5, r26	; 0x05
 102:	b6 83       	std	Z+6, r27	; 0x06
	USART_CONFIGURATION.data_bits = Eight_bits;
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	80 83       	st	Z, r24
	USART_CONFIGURATION.parity = Disable;
 108:	11 82       	std	Z+1, r1	; 0x01
	USART_CONFIGURATION.stop_bit = one_bit;
 10a:	12 82       	std	Z+2, r1	; 0x02
	
	UART_init(&USART_CONFIGURATION);
 10c:	cf 01       	movw	r24, r30
 10e:	0e 94 b7 00 	call	0x16e	; 0x16e <UART_init>
	
	USART_setCallback(uart_callback);
 112:	8e e3       	ldi	r24, 0x3E	; 62
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_setCallback>
	//Global_interrupts_enable();	/* enable global interrupts	*/
    /* Replace with your application code */
	
    while (1) 
    {
		UART_sendByte('a');
 11a:	81 e6       	ldi	r24, 0x61	; 97
 11c:	0e 94 94 00 	call	0x128	; 0x128 <UART_sendByte>
		UART_sendByte('b');
 120:	82 e6       	ldi	r24, 0x62	; 98
 122:	0e 94 94 00 	call	0x128	; 0x128 <UART_sendByte>
 126:	f9 cf       	rjmp	.-14     	; 0x11a <main+0x2a>

00000128 <UART_sendByte>:
 * Disable the receiving interrupt
 * Re-entrance: Non re-entrant
 */
void UART_disableRX_IE(void)
{
	ClearBit(USART_CTRLB_REG, RXCIE_BIT);
 128:	5d 9b       	sbis	0x0b, 5	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128 <UART_sendByte>
 12c:	8c b9       	out	0x0c, r24	; 12
 12e:	08 95       	ret

00000130 <UART_setBaudRate>:
 * Description :
 * Set baud rate of USART
 * Re-entrance: re-entrant
 */
void UART_setBaudRate(uint32_t baudrate)
{
 130:	9b 01       	movw	r18, r22
 132:	ac 01       	movw	r20, r24
	
	uint32_t BR = 16000000/baudrate ;
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	74 e2       	ldi	r23, 0x24	; 36
 138:	84 ef       	ldi	r24, 0xF4	; 244
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 1e 01 	call	0x23c	; 0x23c <__udivmodsi4>
	/*	in asynchronous mode double transmission speed is used	*/
	#if UART_MODE == ASYNCHRONOUS
		BR /= 8;
 140:	da 01       	movw	r26, r20
 142:	c9 01       	movw	r24, r18
 144:	68 94       	set
 146:	12 f8       	bld	r1, 2
 148:	b6 95       	lsr	r27
 14a:	a7 95       	ror	r26
 14c:	97 95       	ror	r25
 14e:	87 95       	ror	r24
 150:	16 94       	lsr	r1
 152:	d1 f7       	brne	.-12     	; 0x148 <UART_setBaudRate+0x18>
	#else
		BR /= 16;
	#endif
	BR -= 1 ;
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
	
	
	//ubrr = (uint16_t)(ubrr);	/* round the value to get correct integer	*/
	
	if(BR < 255)
 15a:	8f 3f       	cpi	r24, 0xFF	; 255
 15c:	91 05       	cpc	r25, r1
 15e:	a1 05       	cpc	r26, r1
 160:	b1 05       	cpc	r27, r1
 162:	10 f4       	brcc	.+4      	; 0x168 <UART_setBaudRate+0x38>
	{
		USART_BRL_REG = (uint8_t)(BR);
 164:	89 b9       	out	0x09, r24	; 9
 166:	08 95       	ret
	}
	else
	{
		USART_BRH_REG = (uint8_t)(BR);
 168:	80 bd       	out	0x20, r24	; 32
		USART_BRL_REG = 0x0F & ((uint8_t)BR >> 8);
 16a:	19 b8       	out	0x09, r1	; 9
 16c:	08 95       	ret

0000016e <UART_init>:
 *	Description :
 *	Initialization function for the UART device; Asynchronus mode only for now
 *	Re-entrance: Non re-entrant
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
 16e:	fc 01       	movw	r30, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * RXB8 & TXB8 are read for the 9th bit in 9-bit data mode
		***********************************************************************/
		/*	UCSZ2_BIT = 1 For 9-bit data mode only, 0 for other	*/
		if(Config_Ptr->data_bits == Nine_bits)
 170:	80 81       	ld	r24, Z
 172:	87 30       	cpi	r24, 0x07	; 7
 174:	19 f4       	brne	.+6      	; 0x17c <UART_init+0xe>
		{
			SetBit(USART_CTRLB_REG, UCSZ2_BIT);
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	8a b9       	out	0x0a, r24	; 10
		else
		{
			//ClearBit(USART_CTRLB_REG, UCSZ2_BIT);
		}
		
			USART_CTRLB_REG |= (1<<RXEN_BIT) | (1<<TXEN_BIT);
 17c:	8a b1       	in	r24, 0x0a	; 10
 17e:	88 61       	ori	r24, 0x18	; 24
 180:	8a b9       	out	0x0a, r24	; 10
		#endif
		
		#if UART_MODE == ASYNCHRONOUS
			USART_CTRLA_REG |= (1<<U2X_BIT);	/* U2X = 1 for double transmission speed */
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	82 60       	ori	r24, 0x02	; 2
 186:	8b b9       	out	0x0b, r24	; 11
			 * UPM1:0  = 00 Disable parity bit
			 * USBS    = 0 One stop bit
			 * UCSZ1:0 = 11 For 8-bit data mode
			 * UCPOL   = 0 Used with the Synchronous operation only
			 ***********************************************************************/
			USART_CTRLC_REG |= (1 << URSEL_BIT) | (Config_Ptr->parity << UPM0_BIT) | (Config_Ptr->stop_bit << USBS_BIT);
 188:	40 b5       	in	r20, 0x20	; 32
 18a:	81 81       	ldd	r24, Z+1	; 0x01
 18c:	20 e1       	ldi	r18, 0x10	; 16
 18e:	82 9f       	mul	r24, r18
 190:	c0 01       	movw	r24, r0
 192:	11 24       	eor	r1, r1
 194:	92 81       	ldd	r25, Z+2	; 0x02
 196:	29 2f       	mov	r18, r25
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	22 0f       	add	r18, r18
 1a0:	33 1f       	adc	r19, r19
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	28 2b       	or	r18, r24
 1aa:	24 2b       	or	r18, r20
 1ac:	20 bd       	out	0x20, r18	; 32
			/*	UCSZ1:UCSZ0 = 11 For 9-bit AND 8-bit data mode only 0 for others	*/
			if(Config_Ptr->data_bits == Nine_bits)
 1ae:	90 81       	ld	r25, Z
 1b0:	97 30       	cpi	r25, 0x07	; 7
 1b2:	39 f4       	brne	.+14     	; 0x1c2 <UART_init+0x54>
			{
				SetBit(USART_CTRLC_REG, UCSZ1_BIT);
 1b4:	80 b5       	in	r24, 0x20	; 32
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	80 bd       	out	0x20, r24	; 32
				SetBit(USART_CTRLC_REG, UCSZ0_BIT);
 1ba:	80 b5       	in	r24, 0x20	; 32
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	80 bd       	out	0x20, r24	; 32
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <UART_init+0x62>
			}
			else
			{
				USART_CTRLC_REG |= (Config_Ptr->data_bits << UCSZ0_BIT);
 1c2:	80 b5       	in	r24, 0x20	; 32
 1c4:	29 2f       	mov	r18, r25
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	22 0f       	add	r18, r18
 1ca:	33 1f       	adc	r19, r19
 1cc:	28 2b       	or	r18, r24
 1ce:	20 bd       	out	0x20, r18	; 32
		#endif
		
	#endif
	
	/* call this function to set UART baudrate	*/
	UART_setBaudRate(Config_Ptr->baud_rate);
 1d0:	63 81       	ldd	r22, Z+3	; 0x03
 1d2:	74 81       	ldd	r23, Z+4	; 0x04
 1d4:	85 81       	ldd	r24, Z+5	; 0x05
 1d6:	96 81       	ldd	r25, Z+6	; 0x06
 1d8:	0e 94 98 00 	call	0x130	; 0x130 <UART_setBaudRate>
 1dc:	08 95       	ret

000001de <USART_setCallback>:
void USART_setCallback(void (*ptr)(uint8_t))
{
	#if UART_TRANSMISSION_MODE == TX
		g_callBackPtr = *ptr;
	#else
		g_callBackPtr = *ptr;
 1de:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <g_callBackPtr+0x1>
 1e2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <g_callBackPtr>
 1e6:	08 95       	ret

000001e8 <__vector_13>:
}

/*	USART ISR	*/
void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	4f 93       	push	r20
 1f8:	5f 93       	push	r21
 1fa:	6f 93       	push	r22
 1fc:	7f 93       	push	r23
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	af 93       	push	r26
 204:	bf 93       	push	r27
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
	if(g_callBackPtr!= (void*)0 )
 20a:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <g_callBackPtr>
 20e:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <g_callBackPtr+0x1>
 212:	30 97       	sbiw	r30, 0x00	; 0
 214:	11 f0       	breq	.+4      	; 0x21a <__vector_13+0x32>
	{
		g_callBackPtr(USART_DATA_REG);
 216:	8c b1       	in	r24, 0x0c	; 12
 218:	09 95       	icall
	}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__udivmodsi4>:
 23c:	a1 e2       	ldi	r26, 0x21	; 33
 23e:	1a 2e       	mov	r1, r26
 240:	aa 1b       	sub	r26, r26
 242:	bb 1b       	sub	r27, r27
 244:	fd 01       	movw	r30, r26
 246:	0d c0       	rjmp	.+26     	; 0x262 <__udivmodsi4_ep>

00000248 <__udivmodsi4_loop>:
 248:	aa 1f       	adc	r26, r26
 24a:	bb 1f       	adc	r27, r27
 24c:	ee 1f       	adc	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	a2 17       	cp	r26, r18
 252:	b3 07       	cpc	r27, r19
 254:	e4 07       	cpc	r30, r20
 256:	f5 07       	cpc	r31, r21
 258:	20 f0       	brcs	.+8      	; 0x262 <__udivmodsi4_ep>
 25a:	a2 1b       	sub	r26, r18
 25c:	b3 0b       	sbc	r27, r19
 25e:	e4 0b       	sbc	r30, r20
 260:	f5 0b       	sbc	r31, r21

00000262 <__udivmodsi4_ep>:
 262:	66 1f       	adc	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	88 1f       	adc	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	1a 94       	dec	r1
 26c:	69 f7       	brne	.-38     	; 0x248 <__udivmodsi4_loop>
 26e:	60 95       	com	r22
 270:	70 95       	com	r23
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	9b 01       	movw	r18, r22
 278:	ac 01       	movw	r20, r24
 27a:	bd 01       	movw	r22, r26
 27c:	cf 01       	movw	r24, r30
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
