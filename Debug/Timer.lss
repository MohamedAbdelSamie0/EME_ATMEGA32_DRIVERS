
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000005fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ff1  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  0000174d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091b  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  000028e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d4  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007be  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000375e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 40 02 	jmp	0x480	; 0x480 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 1d 02 	call	0x43a	; 0x43a <main>
  74:	0c 94 c3 02 	jmp	0x586	; 0x586 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPortDirection>:
	}
}

void DIO_setPortDirection(uint8_t Port, uint8_t dir)
{
	switch(Port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	41 f0       	breq	.+16     	; 0x90 <DIO_setPortDirection+0x14>
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_setPortDirection+0x10>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	39 f0       	breq	.+14     	; 0x94 <DIO_setPortDirection+0x18>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	39 f0       	breq	.+14     	; 0x98 <DIO_setPortDirection+0x1c>
  8a:	08 95       	ret
	{
		case DIO_PORTA:
		DDRA = dir;
  8c:	6a bb       	out	0x1a, r22	; 26
		break;
  8e:	08 95       	ret
		
		case DIO_PORTB:
		DDRB = dir;
  90:	67 bb       	out	0x17, r22	; 23
		break;
  92:	08 95       	ret
		
		case DIO_PORTC:
		DDRC = dir;
  94:	64 bb       	out	0x14, r22	; 20
		break;
  96:	08 95       	ret
		
		case DIO_PORTD:
		DDRD = dir;
  98:	61 bb       	out	0x11, r22	; 17
  9a:	08 95       	ret

0000009c <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
  9c:	41 30       	cpi	r20, 0x01	; 1
  9e:	a1 f5       	brne	.+104    	; 0x108 <DIO_setPinDirection+0x6c>
	{
		switch(Port)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	89 f0       	breq	.+34     	; 0xc6 <DIO_setPinDirection+0x2a>
  a4:	28 f0       	brcs	.+10     	; 0xb0 <DIO_setPinDirection+0x14>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	c9 f0       	breq	.+50     	; 0xdc <DIO_setPinDirection+0x40>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	11 f1       	breq	.+68     	; 0xf2 <DIO_setPinDirection+0x56>
  ae:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
  b0:	2a b3       	in	r18, 0x1a	; 26
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DIO_setPinDirection+0x20>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <DIO_setPinDirection+0x1c>
  c0:	82 2b       	or	r24, r18
  c2:	8a bb       	out	0x1a, r24	; 26
			break;
  c4:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x36>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x32>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
			break;
  da:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
  dc:	24 b3       	in	r18, 0x14	; 20
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x4c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x48>
  ec:	82 2b       	or	r24, r18
  ee:	84 bb       	out	0x14, r24	; 20
			break;
  f0:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
  f2:	21 b3       	in	r18, 0x11	; 17
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_setPinDirection+0x62>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	6a 95       	dec	r22
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_setPinDirection+0x5e>
 102:	82 2b       	or	r24, r18
 104:	81 bb       	out	0x11, r24	; 17
			break;
 106:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 108:	41 11       	cpse	r20, r1
 10a:	37 c0       	rjmp	.+110    	; 0x17a <DIO_setPinDirection+0xde>
	{
		switch(Port)
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	91 f0       	breq	.+36     	; 0x134 <DIO_setPinDirection+0x98>
 110:	28 f0       	brcs	.+10     	; 0x11c <DIO_setPinDirection+0x80>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	d9 f0       	breq	.+54     	; 0x14c <DIO_setPinDirection+0xb0>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	29 f1       	breq	.+74     	; 0x164 <DIO_setPinDirection+0xc8>
 11a:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_setPinDirection+0x8c>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_setPinDirection+0x88>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	8a bb       	out	0x1a, r24	; 26
			break;
 132:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 134:	27 b3       	in	r18, 0x17	; 23
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xa4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xa0>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	87 bb       	out	0x17, r24	; 23
			break;
 14a:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 14c:	24 b3       	in	r18, 0x14	; 20
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_setPinDirection+0xbc>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_setPinDirection+0xb8>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	84 bb       	out	0x14, r24	; 20
			break;
 162:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 164:	21 b3       	in	r18, 0x11	; 17
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_setPinDirection+0xd4>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_setPinDirection+0xd0>
 174:	80 95       	com	r24
 176:	82 23       	and	r24, r18
 178:	81 bb       	out	0x11, r24	; 17
 17a:	08 95       	ret

0000017c <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 17c:	44 23       	and	r20, r20
 17e:	a1 f1       	breq	.+104    	; 0x1e8 <DIO_WritePin+0x6c>
	{
		switch(Port)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	89 f0       	breq	.+34     	; 0x1a6 <DIO_WritePin+0x2a>
 184:	28 f0       	brcs	.+10     	; 0x190 <DIO_WritePin+0x14>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	c9 f0       	breq	.+50     	; 0x1bc <DIO_WritePin+0x40>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	11 f1       	breq	.+68     	; 0x1d2 <DIO_WritePin+0x56>
 18e:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 190:	2b b3       	in	r18, 0x1b	; 27
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_WritePin+0x20>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_WritePin+0x1c>
 1a0:	82 2b       	or	r24, r18
 1a2:	8b bb       	out	0x1b, r24	; 27
			break;
 1a4:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 1a6:	28 b3       	in	r18, 0x18	; 24
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_WritePin+0x36>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_WritePin+0x32>
 1b6:	82 2b       	or	r24, r18
 1b8:	88 bb       	out	0x18, r24	; 24
			break;
 1ba:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 1bc:	25 b3       	in	r18, 0x15	; 21
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_WritePin+0x4c>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_WritePin+0x48>
 1cc:	82 2b       	or	r24, r18
 1ce:	85 bb       	out	0x15, r24	; 21
			break;
 1d0:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 1d2:	22 b3       	in	r18, 0x12	; 18
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_WritePin+0x62>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_WritePin+0x5e>
 1e2:	82 2b       	or	r24, r18
 1e4:	82 bb       	out	0x12, r24	; 18
			break;
 1e6:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 f0       	breq	.+36     	; 0x210 <DIO_WritePin+0x94>
 1ec:	28 f0       	brcs	.+10     	; 0x1f8 <DIO_WritePin+0x7c>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	d9 f0       	breq	.+54     	; 0x228 <DIO_WritePin+0xac>
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	29 f1       	breq	.+74     	; 0x240 <DIO_WritePin+0xc4>
 1f6:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritePin+0x88>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritePin+0x84>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	8b bb       	out	0x1b, r24	; 27
			break;
 20e:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 210:	28 b3       	in	r18, 0x18	; 24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_WritePin+0xa0>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_WritePin+0x9c>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	88 bb       	out	0x18, r24	; 24
			break;
 226:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 228:	25 b3       	in	r18, 0x15	; 21
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_WritePin+0xb8>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_WritePin+0xb4>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	85 bb       	out	0x15, r24	; 21
			break;
 23e:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 240:	22 b3       	in	r18, 0x12	; 18
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_WritePin+0xd0>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_WritePin+0xcc>
 250:	80 95       	com	r24
 252:	82 23       	and	r24, r18
 254:	82 bb       	out	0x12, r24	; 18
 256:	08 95       	ret

00000258 <LCD_WriteCommand>:
		case 3:
		lcd_memory_address=col+0x40;
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_WriteCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	63 e0       	ldi	r22, 0x03	; 3
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 270:	88 b3       	in	r24, 0x18	; 24
 272:	9c 2f       	mov	r25, r28
 274:	92 95       	swap	r25
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	97 70       	andi	r25, 0x07	; 7
 27a:	88 7f       	andi	r24, 0xF8	; 248
 27c:	89 2b       	or	r24, r25
 27e:	88 bb       	out	0x18, r24	; 24
 280:	cc 23       	and	r28, r28
 282:	24 f4       	brge	.+8      	; 0x28c <LCD_WriteCommand+0x34>
 284:	88 b3       	in	r24, 0x18	; 24
 286:	80 61       	ori	r24, 0x10	; 16
 288:	88 bb       	out	0x18, r24	; 24
 28a:	03 c0       	rjmp	.+6      	; 0x292 <LCD_WriteCommand+0x3a>
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	8f 7e       	andi	r24, 0xEF	; 239
 290:	88 bb       	out	0x18, r24	; 24
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 29c:	8f e1       	ldi	r24, 0x1F	; 31
 29e:	9e e4       	ldi	r25, 0x4E	; 78
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_WriteCommand+0x48>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_WriteCommand+0x4e>
 2a6:	00 00       	nop
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 2b2:	88 b3       	in	r24, 0x18	; 24
 2b4:	9c 2f       	mov	r25, r28
 2b6:	97 70       	andi	r25, 0x07	; 7
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	89 2b       	or	r24, r25
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	c3 ff       	sbrs	r28, 3
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <LCD_WriteCommand+0x72>
 2c2:	88 b3       	in	r24, 0x18	; 24
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	88 bb       	out	0x18, r24	; 24
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <LCD_WriteCommand+0x78>
 2ca:	88 b3       	in	r24, 0x18	; 24
 2cc:	8f 7e       	andi	r24, 0xEF	; 239
 2ce:	88 bb       	out	0x18, r24	; 24
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	62 e0       	ldi	r22, 0x02	; 2
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 2da:	8f e1       	ldi	r24, 0x1F	; 31
 2dc:	9e e4       	ldi	r25, 0x4E	; 78
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <LCD_WriteCommand+0x86>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <LCD_WriteCommand+0x8c>
 2e4:	00 00       	nop
 2e6:	40 e0       	ldi	r20, 0x00	; 0
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <LCD_init>:
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDirection>
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDirection>
 308:	6f ef       	ldi	r22, 0xFF	; 255
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPortDirection>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	89 ef       	ldi	r24, 0xF9	; 249
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <LCD_init+0x22>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_init+0x2c>
 320:	00 00       	nop
 322:	88 e2       	ldi	r24, 0x28	; 40
 324:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_WriteCommand>
 328:	8f e0       	ldi	r24, 0x0F	; 15
 32a:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_WriteCommand>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_WriteCommand>
 334:	08 95       	ret

00000336 <LCD_WriteChar>:
 336:	cf 93       	push	r28
 338:	c8 2f       	mov	r28, r24
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 344:	40 e0       	ldi	r20, 0x00	; 0
 346:	62 e0       	ldi	r22, 0x02	; 2
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 358:	88 b3       	in	r24, 0x18	; 24
 35a:	9c 2f       	mov	r25, r28
 35c:	92 95       	swap	r25
 35e:	9f 70       	andi	r25, 0x0F	; 15
 360:	97 70       	andi	r25, 0x07	; 7
 362:	88 7f       	andi	r24, 0xF8	; 248
 364:	89 2b       	or	r24, r25
 366:	88 bb       	out	0x18, r24	; 24
 368:	cc 23       	and	r28, r28
 36a:	24 f4       	brge	.+8      	; 0x374 <LCD_WriteChar+0x3e>
 36c:	88 b3       	in	r24, 0x18	; 24
 36e:	80 61       	ori	r24, 0x10	; 16
 370:	88 bb       	out	0x18, r24	; 24
 372:	03 c0       	rjmp	.+6      	; 0x37a <LCD_WriteChar+0x44>
 374:	88 b3       	in	r24, 0x18	; 24
 376:	8f 7e       	andi	r24, 0xEF	; 239
 378:	88 bb       	out	0x18, r24	; 24
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	62 e0       	ldi	r22, 0x02	; 2
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 384:	8f e1       	ldi	r24, 0x1F	; 31
 386:	9e e4       	ldi	r25, 0x4E	; 78
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_WriteChar+0x52>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_WriteChar+0x58>
 38e:	00 00       	nop
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 39a:	88 b3       	in	r24, 0x18	; 24
 39c:	9c 2f       	mov	r25, r28
 39e:	97 70       	andi	r25, 0x07	; 7
 3a0:	88 7f       	andi	r24, 0xF8	; 248
 3a2:	89 2b       	or	r24, r25
 3a4:	88 bb       	out	0x18, r24	; 24
 3a6:	c3 ff       	sbrs	r28, 3
 3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <LCD_WriteChar+0x7c>
 3aa:	88 b3       	in	r24, 0x18	; 24
 3ac:	80 61       	ori	r24, 0x10	; 16
 3ae:	88 bb       	out	0x18, r24	; 24
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <LCD_WriteChar+0x82>
 3b2:	88 b3       	in	r24, 0x18	; 24
 3b4:	8f 7e       	andi	r24, 0xEF	; 239
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 3c2:	8f e1       	ldi	r24, 0x1F	; 31
 3c4:	9e e4       	ldi	r25, 0x4E	; 78
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <LCD_WriteChar+0x90>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_WriteChar+0x96>
 3cc:	00 00       	nop
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	62 e0       	ldi	r22, 0x02	; 2
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 be 00 	call	0x17c	; 0x17c <DIO_WritePin>
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <LCD_WriteString>:
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <LCD_WriteString+0xe>
 3e4:	21 96       	adiw	r28, 0x01	; 1
 3e6:	0e 94 9b 01 	call	0x336	; 0x336 <LCD_WriteChar>
 3ea:	88 81       	ld	r24, Y
 3ec:	81 11       	cpse	r24, r1
 3ee:	fa cf       	rjmp	.-12     	; 0x3e4 <LCD_WriteString+0x8>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <LCD_intgerToString>:
}

void LCD_intgerToString(uint8_t data)
{
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	60 97       	sbiw	r28, 0x10	; 16
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 40a:	4a e0       	ldi	r20, 0x0A	; 10
 40c:	be 01       	movw	r22, r28
 40e:	6f 5f       	subi	r22, 0xFF	; 255
 410:	7f 4f       	sbci	r23, 0xFF	; 255
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0e 94 8e 02 	call	0x51c	; 0x51c <__itoa_ncheck>
	uint8_t buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	LCD_WriteString(buff); /* Display the string */
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <LCD_WriteString>
}
 420:	60 96       	adiw	r28, 0x10	; 16
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <LCD_Clear>:

void LCD_Clear(void)
{
	LCD_WriteCommand(LCD_CLEAR_COMMAND);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_WriteCommand>
 438:	08 95       	ret

0000043a <main>:
extern uint8_t g_watchDogCounter;
extern uint8_t g_TimerCounter;

int main(void)
{
	DIO_setPinDirection(DIO_PORTA, DIO_PIN5, PIN_OUTPUT);
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	65 e0       	ldi	r22, 0x05	; 5
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	0e 94 4e 00 	call	0x9c	; 0x9c <DIO_setPinDirection>
	
	SetBit(SREG, 7);		/* Enable global interrupts	*/
 444:	8f b7       	in	r24, 0x3f	; 63
 446:	80 68       	ori	r24, 0x80	; 128
 448:	8f bf       	out	0x3f, r24	; 63
	
	LCD_init();
 44a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <LCD_init>
	LCD_Clear();
 44e:	0e 94 19 02 	call	0x432	; 0x432 <LCD_Clear>
    /* Replace with your application code */
	Timer_init();
 452:	0e 94 36 02 	call	0x46c	; 0x46c <Timer_init>
    while (1)
    {
		LCD_Clear();
 456:	0e 94 19 02 	call	0x432	; 0x432 <LCD_Clear>
		LCD_intgerToString(g_TimerCounter);
 45a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_TimerCounter>
 45e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_intgerToString>
		//LCD_moveCursor(1,5);
		LCD_intgerToString(g_watchDogCounter);
 462:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_watchDogCounter>
 466:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_intgerToString>
 46a:	f5 cf       	rjmp	.-22     	; 0x456 <main+0x1c>

0000046c <Timer_init>:
 * input params: NONE
 * output params: NONE
 */ 
void Timer_init()
{
	TIMER0_CTRL_REG = TIMER0_OPERATION_MODE;	/*	normal mode operation with 256 prescaler	*/
 46c:	84 e0       	ldi	r24, 0x04	; 4
 46e:	83 bf       	out	0x33, r24	; 51
	
	#if TIMER_MODE == INTERRUPT_MODE
	TIMERS_IMSK_REG |= (1 << INTERRUPT_BIT);	/*	Enable Timeroverflow interrupt	*/
 470:	89 b7       	in	r24, 0x39	; 57
 472:	81 60       	ori	r24, 0x01	; 1
 474:	89 bf       	out	0x39, r24	; 57
	#endif
	
	TIMER0_CNTR_REG = COUNTER_VALUE;	/*	initial value and start timer	*/
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	82 bf       	out	0x32, r24	; 50
 47a:	08 95       	ret

0000047c <Timer_stop>:
 * input params: NONE
 * output params: NONE
 */ 
void Timer_stop()
{
	TIMER0_CTRL_REG = 0x00;	/* No clock source; timer stopped	*/
 47c:	13 be       	out	0x33, r1	; 51
 47e:	08 95       	ret

00000480 <__vector_11>:
/*
 * Interrupt Service Routine for Timer0 overflow mode
 *
 */ 
ISR(TIMER0_OVF_vect)
{
 480:	1f 92       	push	r1
 482:	0f 92       	push	r0
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	0f 92       	push	r0
 488:	11 24       	eor	r1, r1
 48a:	2f 93       	push	r18
 48c:	3f 93       	push	r19
 48e:	4f 93       	push	r20
 490:	5f 93       	push	r21
 492:	6f 93       	push	r22
 494:	7f 93       	push	r23
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	ef 93       	push	r30
 4a0:	ff 93       	push	r31
	if( TIMER0_NUMBER_OVERFLOWS > g_TimerCounter_flag )
 4a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a6:	8a 3f       	cpi	r24, 0xFA	; 250
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <__vector_11+0x30>
	{
		g_TimerCounter_flag++;	/*	Increment timer counter FLAG till it reaches the number of required overflows	*/
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	if(g_TimerCounter_flag == TIMER0_NUMBER_OVERFLOWS)
 4b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4b4:	8a 3f       	cpi	r24, 0xFA	; 250
 4b6:	59 f4       	brne	.+22     	; 0x4ce <__vector_11+0x4e>
	{
		ToggleBit(PORTA, DIO_PIN5);	/*	Toggle BLUE LED	*/
 4b8:	9b b3       	in	r25, 0x1b	; 27
 4ba:	80 e2       	ldi	r24, 0x20	; 32
 4bc:	89 27       	eor	r24, r25
 4be:	8b bb       	out	0x1b, r24	; 27
		g_TimerCounter++;			/*	Increment timer counter to idicate one second	*/
 4c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_TimerCounter>
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_TimerCounter>
		g_TimerCounter_flag = 0;	/*	Reset Timer Counter FLAG	*/
 4ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(g_TimerCounter == Timer_count_value)
 4ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_TimerCounter>
 4d2:	8a 30       	cpi	r24, 0x0A	; 10
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <__vector_11+0x64>
	{
		g_TimerCounter = 0;		/*	Reset Timer counter	*/
 4d6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <g_TimerCounter>
		g_watchDogCounter++;	/*	Increment watchdog timer	*/
 4da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_watchDogCounter>
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <g_watchDogCounter>
	}
	if(g_watchDogCounter == Watchdog_count_value)
 4e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_watchDogCounter>
 4e8:	86 30       	cpi	r24, 0x06	; 6
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <__vector_11+0x74>
	{
		g_watchDogCounter = 0;	/*	Resest watchdog counter	*/
 4ec:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <g_watchDogCounter>
		Timer_stop();
 4f0:	0e 94 3e 02 	call	0x47c	; 0x47c <Timer_stop>
	}
	SetBit(TIMERS_IF_REG, TIMER0_IF_BIT);	/*	Clear TIMER0 interrupt Flag	*/
 4f4:	88 b7       	in	r24, 0x38	; 56
 4f6:	81 60       	ori	r24, 0x01	; 1
 4f8:	88 bf       	out	0x38, r24	; 56
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__itoa_ncheck>:
 51c:	bb 27       	eor	r27, r27
 51e:	4a 30       	cpi	r20, 0x0A	; 10
 520:	31 f4       	brne	.+12     	; 0x52e <__itoa_ncheck+0x12>
 522:	99 23       	and	r25, r25
 524:	22 f4       	brpl	.+8      	; 0x52e <__itoa_ncheck+0x12>
 526:	bd e2       	ldi	r27, 0x2D	; 45
 528:	90 95       	com	r25
 52a:	81 95       	neg	r24
 52c:	9f 4f       	sbci	r25, 0xFF	; 255
 52e:	0c 94 9a 02 	jmp	0x534	; 0x534 <__utoa_common>

00000532 <__utoa_ncheck>:
 532:	bb 27       	eor	r27, r27

00000534 <__utoa_common>:
 534:	fb 01       	movw	r30, r22
 536:	55 27       	eor	r21, r21
 538:	aa 27       	eor	r26, r26
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	aa 1f       	adc	r26, r26
 540:	a4 17       	cp	r26, r20
 542:	10 f0       	brcs	.+4      	; 0x548 <__utoa_common+0x14>
 544:	a4 1b       	sub	r26, r20
 546:	83 95       	inc	r24
 548:	50 51       	subi	r21, 0x10	; 16
 54a:	b9 f7       	brne	.-18     	; 0x53a <__utoa_common+0x6>
 54c:	a0 5d       	subi	r26, 0xD0	; 208
 54e:	aa 33       	cpi	r26, 0x3A	; 58
 550:	08 f0       	brcs	.+2      	; 0x554 <__utoa_common+0x20>
 552:	a9 5d       	subi	r26, 0xD9	; 217
 554:	a1 93       	st	Z+, r26
 556:	00 97       	sbiw	r24, 0x00	; 0
 558:	79 f7       	brne	.-34     	; 0x538 <__utoa_common+0x4>
 55a:	b1 11       	cpse	r27, r1
 55c:	b1 93       	st	Z+, r27
 55e:	11 92       	st	Z+, r1
 560:	cb 01       	movw	r24, r22
 562:	0c 94 b3 02 	jmp	0x566	; 0x566 <strrev>

00000566 <strrev>:
 566:	dc 01       	movw	r26, r24
 568:	fc 01       	movw	r30, r24
 56a:	67 2f       	mov	r22, r23
 56c:	71 91       	ld	r23, Z+
 56e:	77 23       	and	r23, r23
 570:	e1 f7       	brne	.-8      	; 0x56a <strrev+0x4>
 572:	32 97       	sbiw	r30, 0x02	; 2
 574:	04 c0       	rjmp	.+8      	; 0x57e <strrev+0x18>
 576:	7c 91       	ld	r23, X
 578:	6d 93       	st	X+, r22
 57a:	70 83       	st	Z, r23
 57c:	62 91       	ld	r22, -Z
 57e:	ae 17       	cp	r26, r30
 580:	bf 07       	cpc	r27, r31
 582:	c8 f3       	brcs	.-14     	; 0x576 <strrev+0x10>
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
