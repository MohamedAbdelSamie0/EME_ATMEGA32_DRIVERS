
ADC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000005c0  00000654  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  00000660  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011b1  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f8  00000000  00000000  0000231d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c8  00000000  00000000  00003397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003b5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 8b 02 	jmp	0x516	; 0x516 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 02 	call	0x4a4	; 0x4a4 <main>
  8a:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
 * input params: NONE
 * output params: NONE
 */ 
void ADC_init()
{	
	SetBit(ADC_CTRL_REG, ADC_ENABLE_BIT);	/*	ENABLE ADC	*/
  92:	86 b1       	in	r24, 0x06	; 6
  94:	80 68       	ori	r24, 0x80	; 128
  96:	86 b9       	out	0x06, r24	; 6
	
	#if ADC_MODE == INTERRUPT_MODE
		
		SetBit(SREG, 7);			/*	enable global interrupts	*/
  98:	8f b7       	in	r24, 0x3f	; 63
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8f bf       	out	0x3f, r24	; 63
	
		SetBit(ADC_CTRL_REG, ADC_IE_BIT);	/*	enable ADC interrupts	*/
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	86 b9       	out	0x06, r24	; 6
	
	#endif
	
	DIO_setPortDirection(ADC0_PORT_ID, PORT_INPUT);	/*	MAKE ADC PORT INPUT	*/
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 7a 00 	call	0xf4	; 0xf4 <DIO_setPortDirection>
	
	ADC_MUX_REG |= (1 << 6);	/*	AVcc, right adjust, ADC0	*/
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	87 b9       	out	0x07, r24	; 7
		
	ADC_CTRL_REG |= ADC_PRE_FACTOR;	/*	prescaler of 128	*/
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <ADC_read>:
 * output params: va; converted analouge value
 */ 
void ADC_read(uint8_t channel, uint16_t* val)
{
	/*	clear precious channel read	*/
	ADC_MUX_REG &= 0xF0;
  ba:	97 b1       	in	r25, 0x07	; 7
  bc:	90 7f       	andi	r25, 0xF0	; 240
  be:	97 b9       	out	0x07, r25	; 7
	
	/*	set new +input channel to read	*/
	ADC_MUX_REG |= (channel);
  c0:	97 b1       	in	r25, 0x07	; 7
  c2:	89 2b       	or	r24, r25
  c4:	87 b9       	out	0x07, r24	; 7
	
	/*	start conversion	*/
	SetBit(ADC_CTRL_REG, ADC_SC_BIT);
  c6:	86 b1       	in	r24, 0x06	; 6
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	9c e9       	ldi	r25, 0x9C	; 156
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_read+0x16>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <ADC_read+0x1c>
  d6:	00 00       	nop
		/*	polling on interrupt flag	*/
		while( BIT_IS_CLEAR(ADC_CTRL_REG, ADC_IF_BIT) );
	#endif
	_delay_ms(10);
	
	*val = (ADCL_REG | ((ADCH_REG & 0x03) << 8) );	/*	Read lower byte and higher 2 bits then left shift them by 8	*/
  d8:	24 b1       	in	r18, 0x04	; 4
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	83 70       	andi	r24, 0x03	; 3
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	98 2f       	mov	r25, r24
  e2:	88 27       	eor	r24, r24
  e4:	82 2b       	or	r24, r18
  e6:	fb 01       	movw	r30, r22
  e8:	91 83       	std	Z+1, r25	; 0x01
  ea:	80 83       	st	Z, r24
		
	/*	clear ADIF flag	*/
	SetBit(ADC_CTRL_REG, ADC_IF_BIT);
  ec:	86 b1       	in	r24, 0x06	; 6
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	86 b9       	out	0x06, r24	; 6
  f2:	08 95       	ret

000000f4 <DIO_setPortDirection>:
	}
}

void DIO_setPortDirection(uint8_t Port, uint8_t dir)
{
	switch(Port)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	41 f0       	breq	.+16     	; 0x108 <DIO_setPortDirection+0x14>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_setPortDirection+0x10>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	39 f0       	breq	.+14     	; 0x10c <DIO_setPortDirection+0x18>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	39 f0       	breq	.+14     	; 0x110 <DIO_setPortDirection+0x1c>
 102:	08 95       	ret
	{
		case DIO_PORTA:
		DDRA = dir;
 104:	6a bb       	out	0x1a, r22	; 26
		break;
 106:	08 95       	ret
		
		case DIO_PORTB:
		DDRB = dir;
 108:	67 bb       	out	0x17, r22	; 23
		break;
 10a:	08 95       	ret
		
		case DIO_PORTC:
		DDRC = dir;
 10c:	64 bb       	out	0x14, r22	; 20
		break;
 10e:	08 95       	ret
		
		case DIO_PORTD:
		DDRD = dir;
 110:	61 bb       	out	0x11, r22	; 17
 112:	08 95       	ret

00000114 <DIO_setPinDirection>:
	}
}

void DIO_setPinDirection(uint8_t Port, uint8_t pin, uint8_t dir)
{
	if( dir == DIO_PIN_OUTPUT)
 114:	41 30       	cpi	r20, 0x01	; 1
 116:	a1 f5       	brne	.+104    	; 0x180 <DIO_setPinDirection+0x6c>
	{
		switch(Port)
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	89 f0       	breq	.+34     	; 0x13e <DIO_setPinDirection+0x2a>
 11c:	28 f0       	brcs	.+10     	; 0x128 <DIO_setPinDirection+0x14>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	c9 f0       	breq	.+50     	; 0x154 <DIO_setPinDirection+0x40>
 122:	83 30       	cpi	r24, 0x03	; 3
 124:	11 f1       	breq	.+68     	; 0x16a <DIO_setPinDirection+0x56>
 126:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(DDRA, pin);
 128:	2a b3       	in	r18, 0x1a	; 26
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_setPinDirection+0x20>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	6a 95       	dec	r22
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_setPinDirection+0x1c>
 138:	82 2b       	or	r24, r18
 13a:	8a bb       	out	0x1a, r24	; 26
			break;
 13c:	08 95       	ret
			
			case DIO_PORTB:
			SetBit(DDRB, pin);
 13e:	27 b3       	in	r18, 0x17	; 23
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_setPinDirection+0x36>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_setPinDirection+0x32>
 14e:	82 2b       	or	r24, r18
 150:	87 bb       	out	0x17, r24	; 23
			break;
 152:	08 95       	ret
			
			case DIO_PORTC:
			SetBit(DDRC, pin);
 154:	24 b3       	in	r18, 0x14	; 20
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_setPinDirection+0x4c>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_setPinDirection+0x48>
 164:	82 2b       	or	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
			break;
 168:	08 95       	ret
			
			case DIO_PORTD:
			SetBit(DDRD, pin);
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_setPinDirection+0x62>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_setPinDirection+0x5e>
 17a:	82 2b       	or	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
			break;
 17e:	08 95       	ret
			default:
			/*do nothing*/
			break;
		}
	}
	else if(dir == DIO_PIN_INPUT)
 180:	41 11       	cpse	r20, r1
 182:	37 c0       	rjmp	.+110    	; 0x1f2 <DIO_setPinDirection+0xde>
	{
		switch(Port)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 f0       	breq	.+36     	; 0x1ac <DIO_setPinDirection+0x98>
 188:	28 f0       	brcs	.+10     	; 0x194 <DIO_setPinDirection+0x80>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	d9 f0       	breq	.+54     	; 0x1c4 <DIO_setPinDirection+0xb0>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	29 f1       	breq	.+74     	; 0x1dc <DIO_setPinDirection+0xc8>
 192:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(DDRA, pin);
 194:	2a b3       	in	r18, 0x1a	; 26
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_setPinDirection+0x8c>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_setPinDirection+0x88>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8a bb       	out	0x1a, r24	; 26
			break;
 1aa:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(DDRB, pin);
 1ac:	27 b3       	in	r18, 0x17	; 23
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_setPinDirection+0xa4>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_setPinDirection+0xa0>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	87 bb       	out	0x17, r24	; 23
			break;
 1c2:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(DDRC, pin);
 1c4:	24 b3       	in	r18, 0x14	; 20
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_setPinDirection+0xbc>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_setPinDirection+0xb8>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	84 bb       	out	0x14, r24	; 20
			break;
 1da:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(DDRD, pin);
 1dc:	21 b3       	in	r18, 0x11	; 17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_setPinDirection+0xd4>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_setPinDirection+0xd0>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	81 bb       	out	0x11, r24	; 17
 1f2:	08 95       	ret

000001f4 <DIO_WritePin>:
	}
}

void DIO_WritePin(uint8_t Port, uint8_t pin, uint8_t val)
{
	if(val)
 1f4:	44 23       	and	r20, r20
 1f6:	a1 f1       	breq	.+104    	; 0x260 <DIO_WritePin+0x6c>
	{
		switch(Port)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	89 f0       	breq	.+34     	; 0x21e <DIO_WritePin+0x2a>
 1fc:	28 f0       	brcs	.+10     	; 0x208 <DIO_WritePin+0x14>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	c9 f0       	breq	.+50     	; 0x234 <DIO_WritePin+0x40>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	11 f1       	breq	.+68     	; 0x24a <DIO_WritePin+0x56>
 206:	08 95       	ret
		{
			case DIO_PORTA:
			SetBit(PORTA, pin);
 208:	2b b3       	in	r18, 0x1b	; 27
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WritePin+0x20>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WritePin+0x1c>
 218:	82 2b       	or	r24, r18
 21a:	8b bb       	out	0x1b, r24	; 27
			break;
 21c:	08 95       	ret
		
			case DIO_PORTB:
			SetBit(PORTB, pin);
 21e:	28 b3       	in	r18, 0x18	; 24
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_WritePin+0x36>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_WritePin+0x32>
 22e:	82 2b       	or	r24, r18
 230:	88 bb       	out	0x18, r24	; 24
			break;
 232:	08 95       	ret
		
			case DIO_PORTC:
			SetBit(PORTC, pin);
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_WritePin+0x4c>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_WritePin+0x48>
 244:	82 2b       	or	r24, r18
 246:	85 bb       	out	0x15, r24	; 21
			break;
 248:	08 95       	ret
		
			case DIO_PORTD:
			SetBit(PORTD, pin);
 24a:	22 b3       	in	r18, 0x12	; 18
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_WritePin+0x62>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_WritePin+0x5e>
 25a:	82 2b       	or	r24, r18
 25c:	82 bb       	out	0x12, r24	; 18
			break;
 25e:	08 95       	ret
			break;
		}
	}
	else
	{
		switch(Port)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 f0       	breq	.+36     	; 0x288 <DIO_WritePin+0x94>
 264:	28 f0       	brcs	.+10     	; 0x270 <DIO_WritePin+0x7c>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	d9 f0       	breq	.+54     	; 0x2a0 <DIO_WritePin+0xac>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	29 f1       	breq	.+74     	; 0x2b8 <DIO_WritePin+0xc4>
 26e:	08 95       	ret
		{
			case DIO_PORTA:
			ClearBit(PORTA, pin);
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_WritePin+0x88>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_WritePin+0x84>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	8b bb       	out	0x1b, r24	; 27
			break;
 286:	08 95       	ret
			
			case DIO_PORTB:
			ClearBit(PORTB, pin);
 288:	28 b3       	in	r18, 0x18	; 24
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_WritePin+0xa0>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	6a 95       	dec	r22
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_WritePin+0x9c>
 298:	80 95       	com	r24
 29a:	82 23       	and	r24, r18
 29c:	88 bb       	out	0x18, r24	; 24
			break;
 29e:	08 95       	ret
			
			case DIO_PORTC:
			ClearBit(PORTC, pin);
 2a0:	25 b3       	in	r18, 0x15	; 21
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_WritePin+0xb8>
 2a8:	88 0f       	add	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	6a 95       	dec	r22
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_WritePin+0xb4>
 2b0:	80 95       	com	r24
 2b2:	82 23       	and	r24, r18
 2b4:	85 bb       	out	0x15, r24	; 21
			break;
 2b6:	08 95       	ret
			
			case DIO_PORTD:
			ClearBit(PORTD, pin);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_WritePin+0xd0>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_WritePin+0xcc>
 2c8:	80 95       	com	r24
 2ca:	82 23       	and	r24, r18
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	08 95       	ret

000002d0 <LCD_WriteCommand>:
	
	#endif
}

void LCD_WriteCommand(uint8_t cmd)
{
 2d0:	cf 93       	push	r28
 2d2:	c8 2f       	mov	r28, r24
	uint8_t BIT4 = 0;
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_RS_PIN_ID, PIN_LOW);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	63 e0       	ldi	r22, 0x03	; 3
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	
	/*	Normal implementation	*/
	/*	PORTB = (cmd & 0x0F) | (PORTB & 0xF0);	*/
	
	/*	HARDWARE RESTRICTIONS	*/
	PORTB = ( (cmd >> 4) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 2e8:	88 b3       	in	r24, 0x18	; 24
 2ea:	9c 2f       	mov	r25, r28
 2ec:	92 95       	swap	r25
 2ee:	9f 70       	andi	r25, 0x0F	; 15
 2f0:	97 70       	andi	r25, 0x07	; 7
 2f2:	88 7f       	andi	r24, 0xF8	; 248
 2f4:	89 2b       	or	r24, r25
 2f6:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(cmd, 7);
	if(BIT4)
 2f8:	cc 23       	and	r28, r28
 2fa:	24 f4       	brge	.+8      	; 0x304 <LCD_WriteCommand+0x34>
	{
		SetBit(PORTB, LCD_D7);
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	88 bb       	out	0x18, r24	; 24
 302:	03 c0       	rjmp	.+6      	; 0x30a <LCD_WriteCommand+0x3a>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 304:	88 b3       	in	r24, 0x18	; 24
 306:	8f 7e       	andi	r24, 0xEF	; 239
 308:	88 bb       	out	0x18, r24	; 24
	}

	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	62 e0       	ldi	r22, 0x02	; 2
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	9e e4       	ldi	r25, 0x4E	; 78
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_WriteCommand+0x48>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_WriteCommand+0x4e>
 31e:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 320:	40 e0       	ldi	r20, 0x00	; 0
 322:	62 e0       	ldi	r22, 0x02	; 2
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	
	
	PORTB = ( (cmd) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	9c 2f       	mov	r25, r28
 32e:	97 70       	andi	r25, 0x07	; 7
 330:	88 7f       	andi	r24, 0xF8	; 248
 332:	89 2b       	or	r24, r25
 334:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(cmd, 3);
	if(BIT4)
 336:	c3 ff       	sbrs	r28, 3
 338:	04 c0       	rjmp	.+8      	; 0x342 <LCD_WriteCommand+0x72>
	{
		SetBit(PORTB, LCD_D7);
 33a:	88 b3       	in	r24, 0x18	; 24
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	88 bb       	out	0x18, r24	; 24
 340:	03 c0       	rjmp	.+6      	; 0x348 <LCD_WriteCommand+0x78>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 342:	88 b3       	in	r24, 0x18	; 24
 344:	8f 7e       	andi	r24, 0xEF	; 239
 346:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
 352:	8f e1       	ldi	r24, 0x1F	; 31
 354:	9e e4       	ldi	r25, 0x4E	; 78
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <LCD_WriteCommand+0x86>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <LCD_WriteCommand+0x8c>
 35c:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <LCD_init>:
void LCD_init(void)
{
	#if (LCD_MODE == 4)

	/* Configure the direction for RS and E pins as output pins */
	DIO_setPinDirection(LCD_4BIT_CMD_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
	
	/* Configure the data port as output port */
	DIO_setPortDirection(LCD_4BIT_DATA_PORT_ID, PORT_OUTPUT);
 380:	6f ef       	ldi	r22, 0xFF	; 255
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 7a 00 	call	0xf4	; 0xf4 <DIO_setPortDirection>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	89 ef       	ldi	r24, 0xF9	; 249
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <LCD_init+0x22>
 396:	00 c0       	rjmp	.+0      	; 0x398 <LCD_init+0x2c>
 398:	00 00       	nop
	
	_delay_ms(20);		/* LCD Power ON delay always > 15ms */
	
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_WriteCommand(LCD_TWO_LINES_4_BITS_MODE);
 39a:	88 e2       	ldi	r24, 0x28	; 40
 39c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_CURSOR_ON_BLINK); /* cursor on and blinking */
 3a0:	8f e0       	ldi	r24, 0x0F	; 15
 3a2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteCommand>
	LCD_WriteCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteCommand>
 3ac:	08 95       	ret

000003ae <LCD_WriteChar>:
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
}

void LCD_WriteChar(uint8_t chr)
{
 3ae:	cf 93       	push	r28
 3b0:	c8 2f       	mov	r28, r24
	uint8_t BIT4 = 0;
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_RS_PIN_ID, PIN_HIGH);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	62 e0       	ldi	r22, 0x02	; 2
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_RW_PIN_ID, PIN_LOW);
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	
	/*	Normal implementation	*/
	/*	PORTB = (cmd & 0x0F) | (PORTB & 0xF0);	*/
	
	/*	HARDWARE RESTRICTIONS	*/
	PORTB = ( (chr >> 4) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 3d0:	88 b3       	in	r24, 0x18	; 24
 3d2:	9c 2f       	mov	r25, r28
 3d4:	92 95       	swap	r25
 3d6:	9f 70       	andi	r25, 0x0F	; 15
 3d8:	97 70       	andi	r25, 0x07	; 7
 3da:	88 7f       	andi	r24, 0xF8	; 248
 3dc:	89 2b       	or	r24, r25
 3de:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(chr, 7);
	if(BIT4)
 3e0:	cc 23       	and	r28, r28
 3e2:	24 f4       	brge	.+8      	; 0x3ec <LCD_WriteChar+0x3e>
	{
		SetBit(PORTB, LCD_D7);
 3e4:	88 b3       	in	r24, 0x18	; 24
 3e6:	80 61       	ori	r24, 0x10	; 16
 3e8:	88 bb       	out	0x18, r24	; 24
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <LCD_WriteChar+0x44>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 3ec:	88 b3       	in	r24, 0x18	; 24
 3ee:	8f 7e       	andi	r24, 0xEF	; 239
 3f0:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	62 e0       	ldi	r22, 0x02	; 2
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
 3fc:	8f e1       	ldi	r24, 0x1F	; 31
 3fe:	9e e4       	ldi	r25, 0x4E	; 78
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
	
	PORTB = ( (chr) & 0x07 ) | ( PORTB & 0xF8 );	/*	0x07 = 0000 0111  ,  0xF8 = 1111 1000	*/
 412:	88 b3       	in	r24, 0x18	; 24
 414:	9c 2f       	mov	r25, r28
 416:	97 70       	andi	r25, 0x07	; 7
 418:	88 7f       	andi	r24, 0xF8	; 248
 41a:	89 2b       	or	r24, r25
 41c:	88 bb       	out	0x18, r24	; 24
	
	BIT4 = GetBit(chr, 3);
	if(BIT4)
 41e:	c3 ff       	sbrs	r28, 3
 420:	04 c0       	rjmp	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		SetBit(PORTB, LCD_D7);
 422:	88 b3       	in	r24, 0x18	; 24
 424:	80 61       	ori	r24, 0x10	; 16
 426:	88 bb       	out	0x18, r24	; 24
 428:	03 c0       	rjmp	.+6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	}else
	{
		ClearBit(PORTB, LCD_D7);
 42a:	88 b3       	in	r24, 0x18	; 24
 42c:	8f 7e       	andi	r24, 0xEF	; 239
 42e:	88 bb       	out	0x18, r24	; 24
	}
	
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_HIGH);
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
 43a:	8f e1       	ldi	r24, 0x1F	; 31
 43c:	9e e4       	ldi	r25, 0x4E	; 78
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
	_delay_ms(5);
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DIO_WritePin>
}
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <LCD_WriteString>:

void LCD_WriteString(uint8_t *str)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	ec 01       	movw	r28, r24
	while(*str != '\0')
 45a:	03 c0       	rjmp	.+6      	; 0x462 <LCD_WriteString+0xe>
	{
		LCD_WriteChar(*str++);
 45c:	21 96       	adiw	r28, 0x01	; 1
 45e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <LCD_WriteChar>
	DIO_WritePin(LCD_4BIT_CMD_PORT_ID, LCD_E_PIN_ID, PIN_LOW);
}

void LCD_WriteString(uint8_t *str)
{
	while(*str != '\0')
 462:	88 81       	ld	r24, Y
 464:	81 11       	cpse	r24, r1
 466:	fa cf       	rjmp	.-12     	; 0x45c <LCD_WriteString+0x8>
	{
		LCD_WriteChar(*str++);
	}
}
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <LCD_moveCursor>:
void LCD_moveCursor(uint8_t row,uint8_t col)
{
	uint8_t lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	31 f0       	breq	.+12     	; 0x47e <LCD_moveCursor+0x10>
 472:	70 f0       	brcs	.+28     	; 0x490 <LCD_moveCursor+0x22>
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	31 f0       	breq	.+12     	; 0x484 <LCD_moveCursor+0x16>
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	39 f0       	breq	.+14     	; 0x48a <LCD_moveCursor+0x1c>
 47c:	0a c0       	rjmp	.+20     	; 0x492 <LCD_moveCursor+0x24>
	{
		case 0:
		lcd_memory_address=col;
		break;
		case 1:
		lcd_memory_address=col+0x40;
 47e:	90 e4       	ldi	r25, 0x40	; 64
 480:	96 0f       	add	r25, r22
		break;
 482:	07 c0       	rjmp	.+14     	; 0x492 <LCD_moveCursor+0x24>
		case 2:
		lcd_memory_address=col+0x40;
 484:	90 e4       	ldi	r25, 0x40	; 64
 486:	96 0f       	add	r25, r22
		break;
 488:	04 c0       	rjmp	.+8      	; 0x492 <LCD_moveCursor+0x24>
		case 3:
		lcd_memory_address=col+0x40;
 48a:	90 e4       	ldi	r25, 0x40	; 64
 48c:	96 0f       	add	r25, r22
		break;
 48e:	01 c0       	rjmp	.+2      	; 0x492 <LCD_moveCursor+0x24>
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
	{
		case 0:
		lcd_memory_address=col;
 490:	96 2f       	mov	r25, r22
		case 3:
		lcd_memory_address=col+0x40;
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_WriteCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 492:	89 2f       	mov	r24, r25
 494:	80 68       	ori	r24, 0x80	; 128
 496:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteCommand>
 49a:	08 95       	ret

0000049c <LCD_Clear>:
}

void LCD_Clear(void)
{
	LCD_WriteCommand(LCD_CLEAR_COMMAND);
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LCD_WriteCommand>
 4a2:	08 95       	ret

000004a4 <main>:

uint16_t A_in;
uint8_t g_readFlag;

int main(void)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <main+0x6>
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x8>
 4ac:	1f 92       	push	r1
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	uint8_t string[5];
	//uint16_t* x;
	DIO_setPinDirection(DIO_PORTA, DIO_PIN0, PIN_INPUT);
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
	
	ADC_init();
 4bc:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
	LCD_init();
 4c0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_init>
	LCD_Clear();
 4c4:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_Clear>

    while (1) 
    {
		LCD_WriteString((uint8_t*)"ADC value: ");
 4c8:	80 e6       	ldi	r24, 0x60	; 96
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_WriteString>
		LCD_moveCursor(0, 11);
 4d0:	6b e0       	ldi	r22, 0x0B	; 11
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_moveCursor>
		ADC_read(ADC0_CHANNEL, &A_in);
 4d8:	6c e6       	ldi	r22, 0x6C	; 108
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 5d 00 	call	0xba	; 0xba <ADC_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4e2:	4a e0       	ldi	r20, 0x0A	; 10
 4e4:	be 01       	movw	r22, r28
 4e6:	6f 5f       	subi	r22, 0xFF	; 255
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 4ee:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 4f2:	0e 94 a9 02 	call	0x552	; 0x552 <__itoa_ncheck>
		itoa(A_in, string, 10);
		LCD_WriteString(string);
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_WriteString>
 4fe:	2f ef       	ldi	r18, 0xFF	; 255
 500:	83 ed       	ldi	r24, 0xD3	; 211
 502:	90 e3       	ldi	r25, 0x30	; 48
 504:	21 50       	subi	r18, 0x01	; 1
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x60>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x6a>
 50e:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear();
 510:	0e 94 4e 02 	call	0x49c	; 0x49c <LCD_Clear>
 514:	d9 cf       	rjmp	.-78     	; 0x4c8 <main+0x24>

00000516 <__vector_16>:
/*
 * Interrupt service routine for the ADC interrupt
 * 
 */ 
ISR(ADC_vect)
{
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	2f 93       	push	r18
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
	//g_readFlag = 1;		/*	Set the read flag to indicate that ADC conversion is complete	*/
	A_in = (ADCL_REG | ((ADCH_REG & 0x03) << 8) );	/*	Read lower byte and higher 2 bits then left shift them by 8	*/
 526:	24 b1       	in	r18, 0x04	; 4
 528:	85 b1       	in	r24, 0x05	; 5
 52a:	83 70       	andi	r24, 0x03	; 3
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	98 2f       	mov	r25, r24
 530:	88 27       	eor	r24, r24
 532:	82 2b       	or	r24, r18
 534:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 538:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	
	/*	clear ADIF flag	*/
	SetBit(ADC_CTRL_REG, ADC_IF_BIT);
 53c:	86 b1       	in	r24, 0x06	; 6
 53e:	80 61       	ori	r24, 0x10	; 16
 540:	86 b9       	out	0x06, r24	; 6
}
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__itoa_ncheck>:
 552:	bb 27       	eor	r27, r27
 554:	4a 30       	cpi	r20, 0x0A	; 10
 556:	31 f4       	brne	.+12     	; 0x564 <__itoa_ncheck+0x12>
 558:	99 23       	and	r25, r25
 55a:	22 f4       	brpl	.+8      	; 0x564 <__itoa_ncheck+0x12>
 55c:	bd e2       	ldi	r27, 0x2D	; 45
 55e:	90 95       	com	r25
 560:	81 95       	neg	r24
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__utoa_common>

00000568 <__utoa_ncheck>:
 568:	bb 27       	eor	r27, r27

0000056a <__utoa_common>:
 56a:	fb 01       	movw	r30, r22
 56c:	55 27       	eor	r21, r21
 56e:	aa 27       	eor	r26, r26
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	aa 1f       	adc	r26, r26
 576:	a4 17       	cp	r26, r20
 578:	10 f0       	brcs	.+4      	; 0x57e <__utoa_common+0x14>
 57a:	a4 1b       	sub	r26, r20
 57c:	83 95       	inc	r24
 57e:	50 51       	subi	r21, 0x10	; 16
 580:	b9 f7       	brne	.-18     	; 0x570 <__utoa_common+0x6>
 582:	a0 5d       	subi	r26, 0xD0	; 208
 584:	aa 33       	cpi	r26, 0x3A	; 58
 586:	08 f0       	brcs	.+2      	; 0x58a <__utoa_common+0x20>
 588:	a9 5d       	subi	r26, 0xD9	; 217
 58a:	a1 93       	st	Z+, r26
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	79 f7       	brne	.-34     	; 0x56e <__utoa_common+0x4>
 590:	b1 11       	cpse	r27, r1
 592:	b1 93       	st	Z+, r27
 594:	11 92       	st	Z+, r1
 596:	cb 01       	movw	r24, r22
 598:	0c 94 ce 02 	jmp	0x59c	; 0x59c <strrev>

0000059c <strrev>:
 59c:	dc 01       	movw	r26, r24
 59e:	fc 01       	movw	r30, r24
 5a0:	67 2f       	mov	r22, r23
 5a2:	71 91       	ld	r23, Z+
 5a4:	77 23       	and	r23, r23
 5a6:	e1 f7       	brne	.-8      	; 0x5a0 <strrev+0x4>
 5a8:	32 97       	sbiw	r30, 0x02	; 2
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <strrev+0x18>
 5ac:	7c 91       	ld	r23, X
 5ae:	6d 93       	st	X+, r22
 5b0:	70 83       	st	Z, r23
 5b2:	62 91       	ld	r22, -Z
 5b4:	ae 17       	cp	r26, r30
 5b6:	bf 07       	cpc	r27, r31
 5b8:	c8 f3       	brcs	.-14     	; 0x5ac <strrev+0x10>
 5ba:	08 95       	ret

000005bc <_exit>:
 5bc:	f8 94       	cli

000005be <__stop_program>:
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stop_program>
